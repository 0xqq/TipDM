package com.tipdm.framework.controller.dmserver;

import com.tipdm.framework.common.Constants;
import com.tipdm.framework.common.controller.base.BaseController;
import com.tipdm.framework.common.token.TokenManager;
import com.tipdm.framework.common.token.model.TokenModel;
import org.apache.oltu.oauth2.client.OAuthClient;
import org.apache.oltu.oauth2.client.URLConnectionClient;
import org.apache.oltu.oauth2.client.request.OAuthClientRequest;
import org.apache.oltu.oauth2.client.response.OAuthAccessTokenResponse;
import org.apache.oltu.oauth2.common.OAuth;
import org.apache.oltu.oauth2.common.message.types.GrantType;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.PropertySource;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.PrintWriter;

/**
 * Created by zhoulong on 2016/12/27.
 * E-mail:zhoulong8513@gmail.com
 */
@Controller
@PropertySource(value = "classpath:sysconfig/system.properties")
public class AuthorizeController extends BaseController {

    private final static Logger logger = LoggerFactory.getLogger(AuthorizeController.class);

    @Value("${authorize_url}")
    private String authorizeUrl;

    @Value("${accesstoken_url}")
    private String accessTokenUrl;

    @Value("${redirect_url}")
    private String redirectUrl;

    @Value("${client_id}")
    private String clientId;

    @Value("${client_secret}")
    private String clientSecret;

    @Autowired
    private TokenManager tokenManager;

//    @Autowired
//    private SystemWebSocketHandler systemWebSocketHandler;

    /**
     * 请求授权
     * @param username
     * @param password
     * @param request
     * @return
     */
    @RequestMapping(value = "/authorize", method = RequestMethod.GET)
    public String auth(String username, String password, HttpServletRequest request){

        String url = request.getRequestURL().toString();
        String redirectUrl = url.substring(0, url.length() - request.getRequestURI().length()) + request.getContextPath() + this.redirectUrl;

        return "redirect:" + authorizeUrl + "?client_id=" +clientId+ "&response_type=code&redirect_uri=" + redirectUrl;
    }

    /**
     * 获取accessToken
     * @param request
     * @param response
     * @return
     * @throws Exception
     */
    @RequestMapping(value = "/oauth2-login", method = RequestMethod.GET)
    public ModelAndView login(HttpServletRequest request, HttpServletResponse response) throws Exception{

        String code = request.getParameter("code");
        String url = request.getRequestURL().toString();
        String redirectUrl = url.substring(0, url.length() - request.getRequestURI().length()) + request.getContextPath() + "/apiDoc/index.html";

        OAuthClient oAuthClient = new OAuthClient(new URLConnectionClient());

        OAuthClientRequest accessTokenRequest = OAuthClientRequest
                .tokenLocation(accessTokenUrl)
                .setGrantType(GrantType.AUTHORIZATION_CODE)
                .setClientId(clientId)
                .setClientSecret(clientSecret)
                .setCode(code)
                .setRedirectURI(redirectUrl)
                .buildQueryMessage();

        OAuthAccessTokenResponse oAuthResponse = oAuthClient.accessToken(accessTokenRequest, OAuth.HttpMethod.POST);

        String accessToken = oAuthResponse.getAccessToken();
        Long expiresIn = oAuthResponse.getExpiresIn();

        TokenModel tokenModel = tokenManager.getPermissions(accessToken);

        response.setCharacterEncoding(Constants.CHARACTER);
        response.setContentType("text/html;charset=utf-8");
        PrintWriter out = response.getWriter();
        out.write("<script type='text/javascript'>");
        out.write("parent.setGlobalToken(parent.modal, '"+ accessToken +"', '"+ tokenModel.getUsername() +"')");
        out.write("</script>");

        Cookie cookie = new Cookie("accessToken", accessToken);
        response.addCookie(cookie);
        out.flush();
        out.close();

        return null;
    }

}
