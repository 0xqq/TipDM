package com.tipdm.framework.dmserver;

import com.jcraft.jsch.ChannelExec;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.Session;
import org.springframework.test.context.ContextConfiguration;
import org.springside.modules.test.spring.SpringTransactionalTestCase;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

/**
 * Created by zhoulong on 2017/5/26.
 * E-mail:zhoulong8513@gmail.com
 */
@ContextConfiguration(locations = { "classpath*:/applicationContext*.xml" })
public class SSH2Test extends SpringTransactionalTestCase {

    static
    public void main(String[] args){

        System.out.println();
        ChannelExec channelExec = null;
//        BufferedReader reader = null;
        InputStream stderr = null;
        OutputStream os = null;
        Session session = null;
        JSch jsch = new JSch();
        try {
            session = jsch.getSession("root", "192.168.0.17");
            session.setPassword("123456");
            // 设置第一次登陆的时候提示，可选值：(ask | yes | no)
            session.setConfig("StrictHostKeyChecking", "no");
            session.connect(30000);

            channelExec = (ChannelExec) session.openChannel("exec");

//            channelExec.setCommand("ls /usr/local/R-3.2.0");
//            channelExec.setCommand("/usr/local/R-3.2.0/bin/R CMD Rserve --no-save --RS-enable-remote");
//            channelExec.setCommand("source /etc/profile;R CMD Rserve --RS-enable-remote");
            channelExec.setCommand("source /etc/profile;R CMD Rserve --RS-enable-remote --no-save");
//            channelExec.setInputStream(null);
            os = new ByteArrayOutputStream();
//            channelExec.setErrStream(System.err, false);
            stderr = channelExec.getErrStream();
//            channelExec.connect(1000 * 60);

            channelExec.connect();
//            System.out.println("End...");
//            try(BufferedReader reader = new BufferedReader(new InputStreamReader(stderr))) {
//
//                String line;
//                while ((line = reader.readLine()) != null) {
//                    System.out.println(line);
//                }
//            }

        } catch (Exception e) {
            e.printStackTrace();
        }finally {
            if(null != stderr){
                try {
                    stderr.close();
                } catch (IOException e) {

                }
            }
            channelExec.disconnect();
            session.disconnect();
        }

    }
}
