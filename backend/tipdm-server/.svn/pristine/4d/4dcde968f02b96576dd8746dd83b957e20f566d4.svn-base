package com.tipdm.framework.dmserver.config;

import com.tipdm.framework.common.Constants;
import com.tipdm.framework.common.utils.PropertiesUtil;
import org.apache.commons.io.IOUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.servlet.ServletContextEvent;
import javax.servlet.ServletContextListener;
import java.io.InputStream;
import java.sql.*;
import java.util.Properties;

/**
 * Created by zhoulong on 2017/1/3.
 * E-mail:zhoulong8513@gmail.com
 * 初始化系统默认数据
 */
//@WebListener
public class InitDataBaseListener implements ServletContextListener {

    private final static Logger logger = LoggerFactory.getLogger(InitDataBaseListener.class);
    @Override
    public void contextInitialized(ServletContextEvent servletContextEvent) {

        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet = null;

        logger.info("检测数据库基础数据是否已经初始化");
        try {
            Properties properties = PropertiesUtil.loadProperties("sysconfig/database.properties");

            String url = properties.getProperty("db.url");
            String driver = properties.getProperty("db.driver");
            String user = properties.getProperty("db.user");
            String password = properties.getProperty("db.password");

            Class.forName(driver);
            connection = DriverManager.getConnection(url, user, password);
            statement = connection.createStatement();

            String sql = "select count(1) from sys_user";
            resultSet = statement.executeQuery(sql);

            boolean inited = false;
            //数据库是否已经初始化
            if(resultSet != null){
                logger.info("数据库已经完成初始化");
                while(resultSet.next()){
                    Long count = resultSet.getLong(1);
                    inited = count > 0L;
                }
            }

            //没有初始化，执行sql,插入系统初始化数据
            if(!inited) {
                logger.info("数据库初始化中...");
                InputStream stream = InitDataBaseListener.class.getClassLoader().getResourceAsStream("sql/initData.sql");
                sql = IOUtils.toString(stream, Constants.CHARACTER);
                statement.execute(sql);
            }

        }catch (Exception e){
            logger.error("init database fail: {}", e);
        }finally {

            if(resultSet != null){
                try {
                    resultSet.close();
                } catch (SQLException e) {
                    resultSet = null;
                }
            }

            if(statement != null){
                try {
                    statement.close();
                } catch (SQLException e) {
                    statement = null;
                }
            }

            if(connection != null){
                try {
                    connection.close();
                } catch (SQLException e) {
                    connection = null;
                }
            }
        }
    }

    @Override
    public void contextDestroyed(ServletContextEvent servletContextEvent) {

    }
}
