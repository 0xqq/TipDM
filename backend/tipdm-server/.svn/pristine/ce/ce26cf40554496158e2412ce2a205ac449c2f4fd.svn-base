/*
 * Copyright 2002-2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.springframework.core.type.classreading;

import org.springframework.asm.ClassReader;
import org.springframework.core.NestedIOException;
import org.springframework.core.io.Resource;
import org.springframework.core.type.AnnotationMetadata;
import org.springframework.core.type.ClassMetadata;

import java.io.*;
import java.util.Enumeration;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;

/**
 * {@link MetadataReader} implementation based on an ASM
 * {@link org.springframework.asm.ClassReader}.
 * <p>
 * <p>Package-visible in order to allow for repackaging the ASM library
 * without effect on users of the {@code core.type} package.
 *
 * @author Juergen Hoeller
 * @author Costin Leau
 * @since 2.5
 */
final class SimpleMetadataReader implements MetadataReader {

    private final Resource resource;

    private final ClassMetadata classMetadata;

    private final AnnotationMetadata annotationMetadata;

    /**
     * 是否启用解密
     */
    private final static String enableDecrypt = System.getProperty("server.enableDecrypt", "false");


    SimpleMetadataReader(Resource resource, ClassLoader classLoader) throws IOException {
        InputStream is = new BufferedInputStream(resource.getInputStream());
        ClassReader classReader = null;
        try {
            classReader = new ClassReader(is);
        } catch (IllegalArgumentException ex) {
            throw new NestedIOException("ASM ClassReader failed to parse class file - " +
                    "probably due to a new Java class file version that isn't supported yet: " + resource, ex);
        } catch (ArrayIndexOutOfBoundsException ex){
            is = resource.getInputStream();
            byte[] buf = new byte[1024];
            try(ByteArrayOutputStream baos = new ByteArrayOutputStream();) {
                int len;
                while ((len = is.read(buf, 0, buf.length)) != -1) {
                    baos.write(buf, 0, len);
                }
                byte[] bytes = baos.toByteArray();

//                String osName = System.getProperty("os.name");
//                boolean isWin = osName.toLowerCase().startsWith("win");
                //windows
//                if(isWin) {
//                    bytes = Decrypt.decryptOnWin(bytes);
//                } else {
                    bytes = Decrypt.decrypt(bytes);
//                }
                is = new ByteArrayInputStream(bytes);
                classReader = new ClassReader(is);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            if(is != null) {
                is.close();
            }
        }

        if(classReader == null){
            throw new IOException("Class Not Found, name: " + resource.getURI().toString());
        }
        AnnotationMetadataReadingVisitor visitor = new AnnotationMetadataReadingVisitor(classLoader);
        classReader.accept(visitor, ClassReader.SKIP_DEBUG);

        this.annotationMetadata = visitor;
        // (since AnnotationMetadataReadingVisitor extends ClassMetadataReadingVisitor)
        this.classMetadata = visitor;
        this.resource = resource;
    }

    @Override
    public Resource getResource() {
        return this.resource;
    }

    @Override
    public ClassMetadata getClassMetadata() {
        return this.classMetadata;
    }

    @Override
    public AnnotationMetadata getAnnotationMetadata() {
        return this.annotationMetadata;
    }


    static
    public void main(String[] args) throws IOException {
        JarFile jarFile = new JarFile("E:/tipdm-dmserver-agent.jar");
        Enumeration<JarEntry> en = jarFile.entries();
        while (en.hasMoreElements()) {
            System.out.println(en.nextElement().getName());
        }
        //JarEntry entry = jarFile.getJarEntry("com/tipdm/framework/dmserver.config/InitSystemConstListener");
    }
}
