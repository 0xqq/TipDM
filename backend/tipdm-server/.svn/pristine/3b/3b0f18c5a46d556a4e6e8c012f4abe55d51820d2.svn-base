package com.tipdm.framework.dmserver.core.algo.unparallel.io;

import com.tipdm.framework.common.utils.PropertiesUtil;
import com.tipdm.framework.common.utils.SpringUtils;
import com.tipdm.framework.common.utils.StringKit;
import com.tipdm.framework.dmserver.core.algo.IAlgorithm;
import com.tipdm.framework.dmserver.exception.AlgorithmException;
import com.tipdm.framework.dmserver.utils.DbUtils;
import com.tipdm.framework.model.dmserver.Component;
import com.tipdm.framework.model.dmserver.ComponentIO;
import com.tipdm.framework.service.dmserver.UserTableService;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.MDC;
import org.slf4j.helpers.MessageFormatter;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Map;
import java.util.Properties;

//import com.tipdm.framework.model.dmserver.TableOutput;
//import com.tipdm.framework.service.dmserver.TableOutputService;

/**
 * Created by zhoulong on 2017/4/25.
 * E-mail:zhoulong8513@gmail.com
 * 数据输出组件
 */
public class Output implements IAlgorithm {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    private UserTableService tableService = SpringUtils.getBean("tableService", UserTableService.class);

//    private TableOutputService tableOutputService = SpringUtils.getBean("tableOutputService", TableOutputService.class);

    @Override
    public void run(Component component) throws AlgorithmException {
        //清除上一次运行的日志
        truncateLog(component);
        logger.info("准备开始数据同步");
        Map<String, String> params = component.getParameters();

        if (component.getInputs().size() == 0) {
            throw new AlgorithmException("输入源不能为空");
        }
        ComponentIO input = component.getInputs().stream().findFirst().get();
        String sourceTable = input.getTempTable();
        String targetTable = params.get("tableName");

        if (StringKit.isBlank(targetTable)) {
            String error = MessageFormatter.format("参数\"{}\"不能为空", "tableName").getMessage();
            throw new AlgorithmException(error);
        }

        //是否在插入前清除目标表
        Boolean truncateTable = Boolean.parseBoolean(params.get("truncate"));
        //是否是异构数据库
        Boolean external = Boolean.parseBoolean(params.get("external"));
        Properties properties = PropertiesUtil.loadProperties("/sysconfig/database.properties");
        String driver = properties.getProperty("db.driver");
        String url = properties.getProperty("db.url");
        String user = properties.getProperty("db.user");
        String password = properties.getProperty("db.password");

        Connection from = null;
        Connection to = null;

        try {
            Class.forName(driver);
            from = DriverManager.getConnection(url, user, password);

            //数据输出到平台所属库
            if (!external) {
                String showName = targetTable;
                //生成表名 以前缀"o_"开头
//                targetTable = CommonUtils.generateTableOutputName(component.getCreatorName(), targetTable);

                logger.info("同步数据到平台内部的库表[{}]中", targetTable);

                ResultSet resultSet = from.getMetaData().getTables(null, null, targetTable, null);
                if (!resultSet.next()) {
                    logger.info("数据表[{}不存在", targetTable);
                    logger.info("创建数据表[{}]...", targetTable);
                    tableService.copyData(sourceTable, targetTable, null);
//                    TableOutput tableOutput = new TableOutput();
//                    tableOutput.setShowName(showName);
//                    tableOutput.setTableName(targetTable);
//                    tableOutputService.save(tableOutput);
                } else {
                    tableService.copyData(sourceTable, targetTable, truncateTable, null);
                }
                logger.info("同步完成");
            } else {
                String targetUrl = params.get("url");
                String targetUser = params.get("user");
                String targetPassword = params.get("password");

                DbUtils.DataBase dataBase = DbUtils.validURL(targetUrl);
                try {
                    Class.forName(dataBase.getDriverClass());
                    logger.info("获取连接...");
                    to = DriverManager.getConnection(targetUrl, targetUser, targetPassword);
                    try (ResultSet resultSet = to.getMetaData().getTables(null, null, targetTable, null)) {
                        if (!resultSet.next()) {
                            throw new SQLException(targetUrl + "上不存在数据表[" + targetTable + "]");
                        }
                    }
                } catch (ClassNotFoundException ex) {
                    logger.error("解析URL出错， 无法加载对应的驱动");
                    throw new AlgorithmException("解析URL出错， 无法加载对应的驱动");
                } catch (SQLException ex) {
                    String errorMsg = ExceptionUtils.getRootCauseMessage(ex);
                    if (StringKit.contains(errorMsg, ": ")) {
                        errorMsg = StringKit.substringAfter(errorMsg, ": ");
                    }
                    logger.error(errorMsg);
                    throw new AlgorithmException(errorMsg);
                }

                //插入前清空
                if (truncateTable) {
                    logger.info("清除目标表");
                    to.createStatement().execute("truncate table " + targetTable);
                }
                logger.info("同步任务创建中");
                DbUtils.copyData(component.getCreatorName(), sourceTable, targetTable, from, to);
            }

        } catch (Exception e) {
            logger.error(e.getMessage());
            throw new AlgorithmException(e);
        } finally {
            if (null != to) {
                try {
                    to.close();
                } catch (SQLException e) {

                }
            }

            if (null != from) {
                try {
                    from.close();
                } catch (SQLException e) {

                }
            }
        }
    }

    @SuppressWarnings("all")
    protected void truncateLog(Component component) {
        String id = component.getClientId().toString();
        String log_home = PropertiesUtil.getValue("sysconfig/system.properties", "LOG_HOME");
        try {
            PrintWriter writer = new PrintWriter(new File(log_home + "/" + id + ".log"));
            writer.print("");
            writer.flush();
            writer.close();
        } catch (FileNotFoundException e) {
            logger.error("FileNotFoundException: {}", e);
        }
        MDC.put("component", id);
    }

    /*private void createTable(String columns, String targetTable, Connection to) throws AlgorithmException{
        Map<String, String> dataColumns = null;
        try {
            dataColumns = JSON.parseObject(columns, Map.class);
        }catch (JSONException ex) {
            logger.error("无法解析字段信息");
            throw new AlgorithmException("无法解析字段信息");
        }
        StringBuilder sb = new StringBuilder("create table ");
        sb.append(targetTable).append(" (");
        for(Map.Entry<String, String> entry : dataColumns.entrySet()){
            sb.append(entry.getKey()).append(" ").append(entry.getValue()).append(",\n");
        }
        String sql = StringKit.substringBeforeLast(sb.toString(), ",") + ")";
        try{
            to.createStatement().execute(sql);
        } catch (SQLException ex){
            logger.error("创建数据表失败，错误信息：" + ex.getMessage());
            throw new AlgorithmException("创建数据表失败，错误信息：" + ex.getMessage());
        }
    }*/
}
