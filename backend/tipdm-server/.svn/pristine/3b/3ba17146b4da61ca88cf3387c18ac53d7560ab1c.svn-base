package com.tipdm.framework.dmserver;

import com.jayway.jsonpath.JsonPath;
import com.tipdm.framework.common.utils.FileKit;

import java.io.*;

/**
 * Created by zhoulong on 2017/4/15.
 * E-mail:zhoulong8513@gmail.com
 */
public class ExecPyTest {

    public static final int SUCCESS = 0;            // 表示程序执行成功

    public static final String COMMAND = "java.exe -version";    // 要执行的语句

    public static final String SUCCESS_MESSAGE = "程序执行成功！";

    public static final String ERROR_MESSAGE = "程序执行出错：";

    public static void main(String[] args){

        File file = new File("D:\\workspace\\TipDM\\tipdm-dmserver\\target\\tipdm-dmserver\\doc\\admin\\开发测试工程\\KMeans(Py).json");
        try {
            String json = FileKit.readFileToString(file, "UTF-8");
            net.minidev.json.JSONArray array = JsonPath.parse(json).read("$.nodes[?(@.id=='10000351')].tabs..columnsItems[?(@.name in [sepal_length,sepal_width,petal_length,petal_width])]");

//            JSONArray array = (JSONArray) columnsItems.get(0);
//            List<Field> fieldList = new ArrayList<>();
//            for(int i=0; i< array.size(); i++){
//                LinkedHashMap<String, Object> item = (LinkedHashMap<String, Object>) array.get(i);
//                Field field = ModelUtil.mapToField(item);
//                fieldList.add(field);
//            }
//
//            System.out.println(JSON.toJSONString(fieldList));
//            System.out.println(columnsItems.get(0).toString());
        } catch (IOException e) {
            e.printStackTrace();
        }
//        try {
//            Process process = Runtime.getRuntime().exec("python d:/hello.py");
//            // 打印程序输出
//            readProcessOutput(process);
//
//            // 等待程序执行结束并输出状态
//            int exitCode = process.waitFor();
//
//            if (exitCode == SUCCESS) {
//                System.out.println(SUCCESS_MESSAGE);
//            } else {
//                System.err.println(ERROR_MESSAGE + exitCode);
//            }
//        } catch (IOException e) {
//            e.printStackTrace();
//        } catch (InterruptedException e){
//            e.printStackTrace();
//        }
    }

    /**
     * 打印进程输出
     *
     * @param process 进程
     */
    private static void readProcessOutput(final Process process) {
        // 将进程的正常输出在 System.out 中打印，进程的错误输出在 System.err 中打印
        read(process.getInputStream(), System.out);
        read(process.getErrorStream(), System.err);
    }

    // 读取输入流
    private static void read(InputStream inputStream, PrintStream out) {
        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));

            String line;
            while ((line = reader.readLine()) != null) {
                out.println(line);
            }

        } catch (IOException e) {
            e.printStackTrace();
        } finally {

            try {
                inputStream.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}
