package com.tipdm.framework.dmserver.core.algo.unparallel.evaluate;

import com.tipdm.framework.common.utils.PropertiesUtil;
import com.tipdm.framework.common.utils.RedisUtils;
import com.tipdm.framework.common.utils.SpringUtils;
import com.tipdm.framework.common.utils.StringKit;
import com.tipdm.framework.controller.dmserver.entity.RestfulDataSource;
import com.tipdm.framework.dmserver.core.algo.unparallel.AbstractPythonAlgorithm;
import com.tipdm.framework.dmserver.core.algo.unparallel.executor.AlgorithmExecutor;
import com.tipdm.framework.dmserver.core.algo.unparallel.executor.PyExecutor;
import com.tipdm.framework.dmserver.exception.AlgorithmException;
import com.tipdm.framework.dmserver.mse.ModelUtil;
import com.tipdm.framework.dmserver.utils.Constants;
import com.tipdm.framework.model.dmserver.Component;
import com.tipdm.framework.model.dmserver.ComponentIO;
import com.tipdm.framework.model.dmserver.Model;
import com.tipdm.framework.model.dmserver.Step;
import com.tipdm.framework.service.dmserver.ModelService;
import org.dmg.pmml.PMML;
import org.jpmml.evaluator.ModelEvaluator;
import org.jpmml.evaluator.ModelEvaluatorFactory;
import org.slf4j.helpers.MessageFormatter;

import java.io.File;
import java.io.FileInputStream;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * Created by zhoulong on 2017/6/8.
 * E-mail:zhoulong8513@gmail.com
 * R语言模型评估器
 */
public class PythonEvaluator extends AbstractPythonAlgorithm {

    private final ModelService modelService = SpringUtils.getBean("modelService", ModelService.class);

    @Override
    protected void execute() throws AlgorithmException {

        /*if(!getInputs().containsKey("data_in")){
            throw new AlgorithmException("输入项缺失，key： data_in");
        }

        if(!getOutputs().containsKey("data_out")){
            throw new AlgorithmException("输出项缺失，key： data_out");
        }

        if(!getParams().containsKey("columns")){
            throw new AlgorithmException("缺失参数： columns");
        }*/

        if(!getInputs().containsKey("model")){
            throw new AlgorithmException("缺失参数： model");
        }

        try {
            //获取模型的保存目录
            String modelDir = RedisUtils.get(Constants.MODEL_DIR, String.class);
            Map<String, ComponentIO> inputMap = component.getInputs().stream().collect(Collectors.toMap(ComponentIO::getKey, x -> x));
            ComponentIO io = inputMap.get("model");
            //未保存的模型文件以节点ID命名
            String modelName = io.getTempTable();
            Model model = (Model) RedisUtils.getFromMap(Constants.UN_SAVED_MODEL, modelName);

            if (null == model) {
                model = modelService.findOne(Long.parseLong(io.getTempTable()));
            }

            if(null == model){
                throw new AlgorithmException("model file not found");
            }
            File modelFile = new File(modelDir, model.getModelPath());

            if(!modelFile.exists()){
                throw new AlgorithmException("model file not found");
            }

            if (modelFile.getName().endsWith(".pmml")) {
                PMML pmml = org.jpmml.model.PMMLUtil.unmarshal(new FileInputStream(modelFile));
                ModelEvaluatorFactory modelEvaluatorFactory = ModelEvaluatorFactory.newInstance();
                ModelEvaluator<?> modelEvaluator = modelEvaluatorFactory.newModelEvaluator(pmml);
                LinkedHashMap<String, String> dbConfig = PropertiesUtil.getProperties("sysconfig/database.properties");
                String url = dbConfig.get("db.url");
                String user = dbConfig.get("db.user");
                String password = dbConfig.get("db.password");
                RestfulDataSource dataSource = new RestfulDataSource();
                dataSource.setUrl(url);
                String columns = getParams().get("columns");
                if (StringKit.isBlank(columns)) {
                    columns = "*";
                }
                String sql = MessageFormatter.arrayFormat("select {} from {}", new Object[]{columns, getInputs().get("data_in")}).getMessage();
                dataSource.setSql(sql);
                dataSource.setUser(user);
                dataSource.setPassword(password);
                dataSource.setTarget(getOutputs().get("data_out"));
                dataSource.setTruncate(Boolean.TRUE);
                ModelUtil.doEvaluateRDBMS(modelEvaluator, dataSource);
            } else {
                Component modelComponent = componentService.findOne(model.getSourceId());
                component.setScript(modelComponent.getScript());
                AlgorithmExecutor executor = new PyExecutor(pySession, component, Step.EVALUATE);
                executor.run();
            }
        } catch (Exception e) {
            logger.error("execute Python script fail: {}", e.getMessage());
            throw new AlgorithmException(e);
        }
    }
}
