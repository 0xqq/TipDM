
package com.tipdm.framework.controller.dmserver;

import com.tipdm.framework.common.controller.Result;
import com.tipdm.framework.common.controller.base.BaseController;
import com.tipdm.framework.common.token.impl.RedisTokenManager;
import com.tipdm.framework.common.token.model.TokenModel;
import com.tipdm.framework.common.utils.FileKit;
import com.tipdm.framework.common.utils.PropertiesUtil;
import com.tipdm.framework.common.utils.RedisUtils;
import com.tipdm.framework.common.utils.StringKit;
import com.tipdm.framework.controller.dmserver.entity.DataColumn;
import com.tipdm.framework.controller.dmserver.entity.Table;
import com.tipdm.framework.controller.dmserver.entity.UploadInfo;
import com.tipdm.framework.controller.dmserver.entity.datasource.Connection;
import com.tipdm.framework.controller.dmserver.entity.datasource.Flat;
import com.tipdm.framework.controller.dmserver.entity.datasource.RDBMS;
import com.tipdm.framework.dmserver.utils.CommonUtils;
import com.tipdm.framework.dmserver.utils.Constants;
import com.tipdm.framework.dmserver.utils.DbUtils;
import com.tipdm.framework.model.dmserver.DBConnection;
import com.tipdm.framework.model.dmserver.DataSyncStrategy;
import com.tipdm.framework.model.dmserver.DataType;
import com.tipdm.framework.model.dmserver.UserTable;
import com.tipdm.framework.service.dmserver.UserTableService;
import io.swagger.annotations.*;
import org.apache.commons.lang.ArrayUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.postgresql.copy.CopyManager;
import org.postgresql.core.BaseConnection;
import org.quartz.SchedulerException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.PropertySource;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletResponse;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.*;
import java.util.*;
import java.util.Date;

/**
 * Created by zhoulong on 2016/12/20.
 * E-mail:zhoulong8513@gmail.com
 */
@SuppressWarnings("all")
@PropertySource(value = "classpath:sysconfig/system.properties")
@RestController
@RequestMapping("/api/datasource")
@Api(value = "/api/datasource", tags = "数据源管理", description = "维护用户在平台创建的各类数据源", position = 2)
public class DataSourceController extends BaseController {

    private final static Logger logger = LoggerFactory.getLogger(DataSourceController.class);
    @Autowired
    private UserTableService tableService;

    @Autowired
    private RedisTokenManager tokenManager;

    @RequiresPermissions("datasource:search")
    @RequestMapping(value = "/search", method = RequestMethod.GET)
    @ApiOperation(value = "搜索用户的数据表")
    public Result getTables(@ApiParam(value = "用户访问令牌", required = true) @RequestParam("accessToken") String accessToken,
                            @ApiParam(value = "数据表名称") @RequestParam(required = false) String showName,
                            @ApiParam(value = "状态") @RequestParam(required = false) UserTable.Status status,
                            @ApiParam(value = "开始时间, 格式: yyyy-MM-dd HH:mm:ss", defaultValue = "2016-01-01 00:00:00") @RequestParam(required = false) Date beginTime,
                            @ApiParam(value = "结束时间, 格式: yyyy-MM-dd HH:mm:ss", defaultValue = "2016-01-02 00:00:00") @RequestParam(required = false) Date endTime,
                            @ApiParam(value = "页码", required = true) @RequestParam(value = "pageNumber", defaultValue = "1") int pageNumber,
                            @ApiParam(value = "页大小", required = true) @RequestParam(value = "pageSize", defaultValue = "10") int pageSize) {
        Result result = new Result();

        TokenModel tokenModel = tokenManager.getPermissions(accessToken);

        Map<String, Object> searchParams = new HashMap<>();
        searchParams.put("creatorName", tokenModel.getUsername());
        searchParams.put("showName", showName);
        searchParams.put("status", status);
        searchParams.put("beginTime", beginTime);
        searchParams.put("endTime", endTime);

        Page<UserTable> tables = tableService.findTableByCondition(searchParams, buildPageRequest(pageNumber, pageSize));

        result.setData(tables);
        result.setStatus(Result.Status.SUCCESS);
        return result;
    }

    @RequiresPermissions("datasource:shared")
    @RequestMapping(value = "/shared", method = RequestMethod.GET)
    @ApiOperation(value = "搜索用户的分享列表")
    public Result getSharedTables(@ApiParam(value = "用户访问令牌", required = true) @RequestParam("accessToken") String accessToken,
                                  @ApiParam(value = "数据表名称") @RequestParam(required = false) String showName,
                                  @ApiParam(value = "状态") @RequestParam(required = false) UserTable.Status status,
                                  @ApiParam(value = "开始时间, 格式: yyyy-MM-dd HH:mm:ss", defaultValue = "2016-01-01 00:00:00") @RequestParam(required = false) Date beginTime,
                                  @ApiParam(value = "结束时间, 格式: yyyy-MM-dd HH:mm:ss", defaultValue = "2016-01-02 00:00:00") @RequestParam(required = false) Date endTime,
                                  @ApiParam(value = "页码", required = true) @RequestParam(value = "pageNumber", defaultValue = "1") int pageNumber,
                                  @ApiParam(value = "页大小", required = true) @RequestParam(value = "pageSize", defaultValue = "10") int pageSize) {
        Result result = new Result();

        TokenModel tokenModel = tokenManager.getPermissions(accessToken);

        Map<String, Object> searchParams = new HashMap<>();
        searchParams.put("creatorId", tokenModel.getUserId());
        searchParams.put("showName", showName);
        searchParams.put("status", status);
        searchParams.put("beginTime", beginTime);
        searchParams.put("endTime", endTime);

        Page<UserTable> tables = tableService.findSharedTables(searchParams, buildPageRequest(pageNumber, pageSize));

        result.setData(tables);
        result.setStatus(Result.Status.SUCCESS);
        return result;
    }

    @RequiresPermissions("datasource:filter")
    @RequestMapping(value = "/filter", method = RequestMethod.GET)
    @ApiOperation(value = "过滤表", notes = "根据用户输入过滤表，可通过设置limit来调整返回的数据集的大小")
    public Result filterTable(@ApiParam(value = "用户访问令牌", required = true) @RequestParam("accessToken") String accessToken,
                              @ApiParam(value = "前缀", required = true) @RequestParam String prefix,
                              @ApiParam(value = "要排除的数据表类型", required = true, defaultValue = "NONE") @RequestParam Table.ExcludeType[] exclude,
                              @ApiParam(value = "返回的数据条数", required = true, allowableValues = "range[1,100]") @RequestParam(value = "limit", defaultValue = "20") int limit) {
        Result result = new Result();

        if (limit > 100) {
            limit = 100;
        }

        if (prefix == null) {
            throw new IllegalArgumentException("必须输入数据表名");
        }
        TokenModel tokenModel = tokenManager.getPermissions(accessToken);
        List<Integer> values = new ArrayList<>();
        for (Table.ExcludeType excludeType : exclude) {
            values.add(excludeType.getValue());
        }
        List<Map<String, Object>> data = tableService.filterUserTable(tokenModel.getUserId(), prefix + "%", values, limit);
        result.setMessage("数据加载成功");
        result.setData(data);

        return result;
    }

    @RequiresPermissions("datasource:syncTable")
    @RequestMapping(value = "/syncTable", method = RequestMethod.GET)
    @ApiOperation(value = "同步表数据", notes = "立即执行数据源同步")
    public Result syncTable(@ApiParam(value = "用户访问令牌", required = true) @RequestParam("accessToken") String accessToken,
                            @ApiParam(value = "要同步的目标表", required = true) @RequestParam String tableName) throws Exception {
        Result result = new Result();

        TokenModel tokenModel = tokenManager.getPermissions(accessToken);
        tableName = CommonUtils.generateTableName(tokenModel.getUsername(), tableName);
        try {
            tableService.syncTable(accessToken, tableName);
            result.setMessage("数据同步任务提交成功");
        } catch (SchedulerException ex) {
            result.setStatus(Result.Status.FAIL);
            result.setMessage(ex.getMessage());
        }
        return result;
    }

    @RequiresPermissions("datasource:syncTable")
    @RequestMapping(value = "/sync/{tableId}/config", method = RequestMethod.POST)
    @ApiOperation(value = "同步设置", notes = "数据源同步配置；使用增量方式同步数据，结果集中必须包含主键和时间戳")
    public Result dataSyncConfig(@ApiParam(value = "用户访问令牌", required = true) @RequestParam("accessToken") String accessToken,
                                 @ApiParam(value = "同步策略", required = true) @RequestBody DataSyncStrategy strategy,
                                 @ApiParam(value = "数据源Id", required = true) @PathVariable Long tableId) throws Exception {
        Result result = new Result();
        TokenModel tokenModel = tokenManager.getPermissions(accessToken);
        strategy.setTableId(tableId);
        Long id = tableService.addDataSyncStrategy(strategy);
        result.setData(id);
        return result;
    }

    @RequiresPermissions("datasource:preview")
    @RequestMapping(value = "/{tableId}/preview", method = RequestMethod.GET)
    @ApiOperation(value = "预览表数据", notes = "预览数据源前100条记录")
    public Result preview(@ApiParam(value = "用户访问令牌", required = true) @RequestParam("accessToken") String accessToken,
                          @ApiParam(value = "数据表id", required = true) @PathVariable(name = "tableId") Long tableId,
                          @ApiParam(value = "页码", required = true) @RequestParam(value = "pageNumber", defaultValue = "1") int pageNumber,
                          @ApiParam(value = "页大小", required = true) @RequestParam(value = "pageSize", defaultValue = "100") int pageSize) {
        Result result = new Result();
        Page<Map<String, Object>> data = tableService.previewData(tableId, buildPageRequest(pageNumber, pageSize));
        result.setData(data);
        result.setMessage("数据加载成功");
        return result;
    }

    //    @RequiresPermissions("datasource:connectionInfo")
    @RequestMapping(value = "/{tableId}/connection/info", method = RequestMethod.GET)
    @ApiOperation(value = "查看连接信息", notes = "查看数据源的连接信息(仅支持RDBMS)")
    public Result connectionInfo(@ApiParam(value = "用户访问令牌", required = true) @RequestParam("accessToken") String accessToken,
                                 @ApiParam(value = "数据表id", required = true) @PathVariable(name = "tableId") Long tableId) {
        Result result = new Result();
        UserTable table = tableService.findOne(tableId);
        result.setData(table.getConn());
        result.setMessage("数据加载成功");
        return result;
    }


    @RequiresPermissions("datasource:test")
    @RequestMapping(value = "/connection/test", method = RequestMethod.POST)
    @ApiOperation(value = "测试数据库连接", notes = "连接成功后返回元数据信息和前100条数据")
    public Result testDBConn(@ApiParam(value = "用户访问令牌", required = true) @RequestParam("accessToken") String accessToken,
                             @ApiParam(value = "数据库连接信息", required = true) @RequestBody Connection conn) throws Exception {
        Result result = new Result();
        Map data = testConnection(conn);
        result.setData(data);
        return result;
    }

    private Map<String, Object> testConnection(Connection conn) throws ClassNotFoundException, SQLException {
        String url = conn.getUrl();
        DbUtils.DataBase dataBase = DbUtils.validURL(url);
        Map<String, Object> result = new HashMap<>();
        Class.forName(dataBase.getDriverClass());
        String sql = dataBase.limit(conn.getSql());
        logger.info("execute test SQL: {}", sql);
        try(java.sql.Connection connection = DriverManager.getConnection(conn.getUrl(), conn.getUserName(), conn.getPassword())) {
            List<Map<String, Object>> data = new ArrayList<Map<String, Object>>();
            List<DataColumn> columns = new ArrayList<>();
            try(Statement statement = connection.createStatement()){
                try(ResultSet resultSet = statement.executeQuery(sql)) {
                    if (resultSet != null) {
                        ResultSetMetaData metaData = resultSet.getMetaData();
                        boolean first = true;
                        while (resultSet.next()) {
                            Map<String, Object> tmpData = new HashMap<>();
                            for (int i = 1; i <= metaData.getColumnCount(); i++) {
                                String columnName = metaData.getColumnName(i);
                                Object value = resultSet.getObject(i);
                                tmpData.put(columnName, value);
                                if(first){
                                    DataColumn column = new DataColumn();
                                    column.setName(columnName);
                                    column.setDataType(DataType.getDataType(String.valueOf(value)));
                                    columns.add(column);
                                }
                            }
                            data.add(tmpData);
                            first = false;
                        }
                    }
                }
            }
            //写入缓存，5分钟有效
            com.tipdm.framework.common.utils.RedisUtils.set(conn.toString(), "", 60 * 5L);
            result.put("data", data);
            result.put("columns", columns);
        }
        return result;
    }

    @RequiresPermissions("datasource:exists")
    @RequestMapping(value = "/{tableName}/exists", method = RequestMethod.GET)
    @ApiOperation(value = "检查数据表是否存在")
    public Result exists(@ApiParam(value = "用户访问令牌", required = true) @RequestParam("accessToken") String accessToken,
                         @ApiParam(value = "数据表名称", required = true) @PathVariable(name = "tableName") String tableName) {

        Result result = new Result();
        String lowercase = tableName.toLowerCase();
        if (!lowercase.equals(tableName)) {
            result.setStatus(Result.Status.FAIL);
            result.setMessage("数据表名不能包含大写字母");
            return result;
        }
        TokenModel tokenModel = tokenManager.getPermissions(accessToken);
        tableName = CommonUtils.generateTableName(tokenModel.getUsername(), tableName);

        UserTable userTable = tableService.findTableByTableName(tableName);
        result.setData(userTable != null);
        return result;
    }

    @RequiresPermissions("datasource:delete")
    @RequestMapping(value = "/{tableId}", method = RequestMethod.DELETE)
    @ApiOperation(value = "删除数据表")
    public Result delete(@ApiParam(value = "用户访问令牌", required = true) @RequestParam("accessToken") String accessToken,
                         @ApiParam(value = "数据表ID", required = true) @PathVariable(name = "tableId") Long tableId) throws IllegalAccessException {

        Result result = new Result();
        TokenModel tokenModel = tokenManager.getPermissions(accessToken);
        tableService.deleteTable(tokenModel.getUserId(), tableId);
        result.setMessage("删除数据表成功");
        return result;
    }


    @RequiresPermissions("datasource:flat")
    @RequestMapping(value = "/flat", method = RequestMethod.POST, consumes = "application/json", produces = "application/json")
    @ApiOperation(value = "创建数据表(Flat)", notes = "数据表创建成功后返回全局唯一的上传凭证：uploadId，用于后续的文件上传，uploadId在上传成功后失效")
    @ApiResponses({
            @ApiResponse(code = 201, message = "数据表创建成功"),
            @ApiResponse(code = 400, message = "提交的数据错误"),
            @ApiResponse(code = 401, message = "无效的token或token已过期"),
            @ApiResponse(code = 403, message = "您没有权限执行此操作")
    })
    public Result createUserTableFromFlatFile(@ApiParam(value = "用户访问令牌", required = true) @RequestParam("accessToken") String accessToken,
                                              @ApiParam(value = "用户数据表信息", required = false, name = "info") @RequestBody Flat flat,
                                              HttpServletResponse response) {
        Result result = new Result();
        String lowercase = flat.getTableName().toLowerCase();
        if (lowercase.equals(flat.getTableName())) {
            TokenModel tokenModel = tokenManager.getPermissions(accessToken);
            String tableName = CommonUtils.generateTableName(tokenModel.getUsername(), flat.getTableName());

            UserTable userTable = new UserTable(tokenModel.getUsername(), tokenModel.getUserId(), flat.getTableName(), tableName, UserTable.TableType.FLAT_FILE);
            userTable.setPreviewMode(flat.getPreviewMode());
            userTable.setDuration(flat.getDuration());
            Long tableId = tableService.createTable(userTable, flat.getColumns());
            String uploadId = StringKit.getBase64FromUUID();
            RedisUtils.putToMap(com.tipdm.framework.dmserver.utils.Constants.FILE_UPLOAD_ID, uploadId, new UploadInfo(tableId, uploadId, UploadInfo.Category.FLAT));
            result.setData(uploadId);
            response.setStatus(HttpStatus.CREATED.value());
            return result;
        } else {
            result.setStatus(Result.Status.FAIL);
            result.setMessage("数据表名不能包含大写字母");
            response.setStatus(HttpStatus.BAD_REQUEST.value());
            return result;
        }
    }

    @RequiresPermissions("unstruct:remote")
    @RequestMapping(value = "/unstructured/remote", method = RequestMethod.POST, consumes = "application/json", produces = "application/json")
    @ApiOperation(value = "创建数据表(非结构化数据)", notes = "指定服务器上的文件/目录作为数据文件，调用接口/api/file/list获取服务端路径（懒加载）")
    @ApiResponses({
            @ApiResponse(code = 201, message = "数据表创建成功"),
            @ApiResponse(code = 400, message = "提交的数据错误"),
            @ApiResponse(code = 401, message = "无效的token或token已过期"),
            @ApiResponse(code = 403, message = "您没有权限执行此操作")
    })
    public Result createUserTableFromUnstructuredData(@ApiParam(value = "用户访问令牌", required = true) @RequestParam("accessToken") String accessToken,
                                                      @ApiParam(value = "数据表", required = true) @RequestParam String tableName,
                                                      @ApiParam(value = "路径", required = true) @RequestParam String path,
                                                      HttpServletResponse response) {

        Result result = new Result();

        //获取公共目录
        String ROOT = RedisUtils.get(Constants.SMB_PUBLIC_DIR, String.class);
        if(StringKit.isBlank(ROOT)){
            result.setMessage("No such file or directory: " + ROOT);
            result.setStatus(Result.Status.FAIL);
            return result;
        }

        TokenModel tokenModel = tokenManager.getPermissions(accessToken);
        UserTable userTable = new UserTable();
        userTable.setCreatorId(tokenModel.getUserId());
        userTable.setCreatorName(tokenModel.getUsername());
        userTable.setStatus(UserTable.Status.FINISH);
        userTable.setTableType(UserTable.TableType.UNSTRUCTURED);
        userTable.setShowName(tableName);
        userTable.setTableName(new File(ROOT, path).getAbsolutePath());
        Long tableId = tableService.createTable(userTable);
        result.setData(tableId);
        return result;
    }

    @RequiresPermissions("unstruct:local")
    @RequestMapping(value = "/unstructured/local", method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @ApiOperation(value = "创建数据表(非结构化数据)", notes = "从客户端上传数据文件")
    @ApiResponses({
            @ApiResponse(code = 201, message = "数据表创建成功"),
            @ApiResponse(code = 400, message = "提交的数据错误"),
            @ApiResponse(code = 401, message = "无效的token或token已过期"),
            @ApiResponse(code = 403, message = "您没有权限执行此操作")
    })
    public Result createUserTableFromUnstructuredData1(@ApiParam(value = "用户访问令牌", required = true) @RequestParam("accessToken") String accessToken,
                                                       @ApiParam(value = "数据表", required = true) @RequestParam String tableName,
                                                       @ApiParam(value = "数据文件", required = true) @RequestBody MultipartFile file,
                                                       HttpServletResponse response) throws IOException {

        Result result = new Result();
        //获取根目录
        String ROOT = RedisUtils.get(Constants.SMB_PRIVATE_DIR, String.class);
        if(StringKit.isBlank(ROOT)){
            result.setMessage("No such file or directory: " + ROOT);
            result.setStatus(Result.Status.FAIL);
            return result;
        }
        TokenModel tokenModel = tokenManager.getPermissions(accessToken);
        UserTable userTable = new UserTable();
        userTable.setCreatorId(tokenModel.getUserId());
        userTable.setCreatorName(tokenModel.getUsername());
        userTable.setStatus(UserTable.Status.FINISH);
        userTable.setTableType(UserTable.TableType.UNSTRUCTURED);
        userTable.setShowName(tableName);
        String fileName = StringKit.getBase64FromUUID() + ".tdata";
        File ownDir = new File(ROOT, tokenModel.getUsername());
        //检测目录是否存在
        if(!ownDir.exists()){
            ownDir.mkdirs();
        }
        File dataFile = new File(ownDir, fileName);
        file.transferTo(dataFile);
        dataFile.createNewFile();
        userTable.setTableName(dataFile.getAbsolutePath());
        Long tableId = tableService.createTable(userTable);
        result.setData(tableId);
        return result;
    }

    @RequiresPermissions("datasource:rdbms")
    @RequestMapping(value = "/rdbms", method = RequestMethod.POST, consumes = "application/json", produces = "application/json")
    @ApiOperation(value = "创建数据表(RDBMS)")
    @ApiResponses({
            @ApiResponse(code = 201, message = "数据表创建成功"),
            @ApiResponse(code = 400, message = "提交的数据错误"),
            @ApiResponse(code = 401, message = "无效的token或token已过期"),
            @ApiResponse(code = 403, message = "您没有权限执行此操作")
    })
    public Result createUserTableFromRDBMS(@ApiParam(value = "用户访问令牌", required = true) @RequestParam("accessToken") String accessToken,
                                           @ApiParam(value = "用户数据表信息", required = true, name = "info") @RequestBody RDBMS rdbms,
                                           HttpServletResponse response) throws SQLException, ClassNotFoundException, IllegalAccessException {
        Result result = new Result();
        String lowercase = rdbms.getTableName().toLowerCase();
        if (!lowercase.equals(rdbms.getTableName())) {
            result.setStatus(Result.Status.FAIL);
            result.setMessage("数据表名不能包含大写字母");
            response.setStatus(HttpStatus.BAD_REQUEST.value());
            return result;
        }
        boolean exists = RedisUtils.exists(rdbms.getConnection().toString());
        if (!exists) {
            response.setStatus(HttpStatus.BAD_REQUEST.value());
            result.setMessage("连接必须先通过测试");
            result.setStatus(Result.Status.FAIL);
            return result;
        }

        TokenModel tokenModel = tokenManager.getPermissions(accessToken);
        String tableName = CommonUtils.generateTableName(tokenModel.getUsername(), rdbms.getTableName());
        UserTable userTable = new UserTable(tokenModel.getUsername(), tokenModel.getUserId(), rdbms.getTableName(), tableName, UserTable.TableType.RDBMS);
        userTable.setDuration(rdbms.getDuration());
        userTable.setPreviewMode(rdbms.getPreviewMode());
        DBConnection conn = new DBConnection();
        BeanUtils.copyProperties(rdbms.getConnection(), conn);

        Long tableId = tableService.createTable(userTable, conn, rdbms.getColumns());
        //将表名保存到redis, 监听key的过期事件
        RedisUtils.set("@pg:" + tableName, null, userTable.getDuration() * (24 * 60 * 60L));
        //写入预览的数据，验证字段的数据类型设置是否正确
        try(java.sql.Connection connection = DriverManager.getConnection(conn.getUrl(), conn.getUserName(), conn.getPassword())) {
            DbUtils.DataBase dataBase = DbUtils.validURL(conn.getUrl());
            Class.forName(dataBase.getDriverClass());
            String sql = dataBase.limit(conn.getSql());

            try(Statement statement = connection.createStatement()) {
                try (ResultSet resultSet = statement.executeQuery(sql)) {
                    if (resultSet != null) {
                        Properties properties = PropertiesUtil.loadProperties("/sysconfig/database.properties");
                        Class.forName(properties.getProperty("db.driver"));
                        java.sql.Connection target = DriverManager.getConnection(properties.getProperty("db.url"), properties.getProperty("db.user"), properties.getProperty("db.password"));

                        ResultSetMetaData rsmd = resultSet.getMetaData();
                        CopyManager copyManager = new CopyManager((BaseConnection) target);
                        List<String> lines = new ArrayList<>();
                        int counter = 0;
                        String fileName = StringKit.getBase64FromUUID();
                        File tempFile = new File(fileName);

                        while (resultSet.next()) {
                            StringBuilder sb = new StringBuilder();
                            counter += 1;
                            for (int i = 1; i <= rsmd.getColumnCount(); i++) {
                                String lastChar = (i == rsmd.getColumnCount()) ? "" : ",";
                                Object value = resultSet.getObject(i);
                                if(value instanceof String){
                                    value = ((String) value).replaceAll("\n", " ");
                                    value = ((String) value).replaceAll("\"", "“");
                                    value = "\"" + value + "\"";
                                }
                                sb.append(value).append(lastChar);
                            }
                            lines.add(sb.toString());
                            if(counter == 10){
                                break;
                            }
                        }

                        if(!tempFile.exists()){
                            tempFile.createNewFile();
                        }
                        FileKit.writeLines(tempFile, com.tipdm.framework.common.Constants.CHARACTER, lines, true);
                        lines.clear();
                        //写入到表
                        try(FileInputStream in = new FileInputStream(tempFile)){
                            copyManager.copyIn("copy " + tableName + " from stdin with csv QUOTE '\"' delimiter ',' NULL as 'null'", in);
                            counter = 0;
                            //移除缓存
                            RedisUtils.remove(rdbms.getConnection().toString());
                            //清空数据
                            tableService.truncateTable(tableName);
                        } catch (Exception ex ){
                            throw ex;
                        }finally {
                            tempFile.delete();
                        }
                    }
                }
            }
        } catch (Exception ex){
            tableService.deleteTable(tokenModel.getUserId(), tableId);
            result.setMessage("数据类型匹配验证失败：" + ex.getMessage());
            result.setStatus(Result.Status.FAIL);
            return result;
        }
        result.setData(tableId);
        response.setStatus(HttpStatus.CREATED.value());
        return result;
    }

    @RequiresPermissions("datasource:structure")
    @RequestMapping(value = "/table/{table}/structure", method = RequestMethod.GET)
    @ApiOperation(value = "获取表的结构信息", notes = "返回表的数据结构，vals为字段的值的分布概况")
    public Result getTableStructure(@ApiParam(value = "用户访问令牌", required = true) @RequestParam("accessToken") String accessToken,
                                    @ApiParam(value = "数据表Id/数据表名称", required = true) @PathVariable(name = "table") String table) throws FileNotFoundException {

        Result result = new Result();

        if (!NumberUtils.isDigits(table)) {
            TokenModel tokenModel = tokenManager.getPermissions(accessToken);
            table = CommonUtils.generateTableName(tokenModel.getUsername(), table);
        }

        List<Map<String, Object>> structures = tableService.getTableStructure(table);
        result.setData(structures);
        result.setMessage("数据加载成功");
        return result;
    }

    @RequiresPermissions("datasource:share")
    @SuppressWarnings("all")
    @RequestMapping(value = "/{dataSourceId}/share", method = RequestMethod.POST)
    @ApiOperation(value = "分享数据源", position = 6)
    public Result shareModel(@ApiParam(value = "用户访问令牌", required = true) @RequestParam("accessToken") String accessToken,
                             @ApiParam(value = "数据源ID", required = true) @PathVariable(name = "dataSourceId") Long dataSourceId,
                             @ApiParam(value = "分享的目标用户", allowMultiple = true, required = true) @RequestParam Long[] users) {
        Result result = new Result();

        if (!ArrayUtils.isEmpty(users)) {
            tableService.shareModel(dataSourceId, users);
            result.setMessage("数据源分享成功");
            return result;
        }
        result.setMessage("分享的用户不能为空");
        result.setStatus(Result.Status.FAIL);
        return result;
    }

}
