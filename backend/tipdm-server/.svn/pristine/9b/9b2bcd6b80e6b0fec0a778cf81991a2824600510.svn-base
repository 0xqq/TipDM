package com.tipdm.framework.dmserver.core.task.model;

import com.tipdm.framework.common.utils.PropertiesUtil;
import com.tipdm.framework.common.utils.RedisUtils;
import com.tipdm.framework.common.utils.SpringUtils;
import com.tipdm.framework.common.utils.StringKit;
import com.tipdm.framework.dmserver.core.task.schedule.AtomicEnum;
import com.tipdm.framework.dmserver.core.task.schedule.JobState;
import com.tipdm.framework.dmserver.core.task.schedule.WorkFlow;
import com.tipdm.framework.dmserver.utils.CommonUtils;
import com.tipdm.framework.model.dmserver.Component;
import com.tipdm.framework.model.dmserver.ComponentIO;
import com.tipdm.framework.model.dmserver.UserTable;
import com.tipdm.framework.service.dmserver.ComponentService;
import com.tipdm.framework.service.dmserver.UserTableService;
import org.apache.commons.lang.math.NumberUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;

import java.io.Serializable;
import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;

/**
 * Created by TipDM on 2017/1/7.
 * E-mail:devp@tipdm.com
 */
public class Job implements Serializable {

    private final static Logger logger = LoggerFactory.getLogger(Job.class);

    private static final long serialVersionUID = -2673002853824281869L;

    private static Long expiredSeconds;

    static {
        expiredSeconds = Long.parseLong(PropertiesUtil.getValue("sysconfig/redis.properties", "redis.tableExpired.seconds", "604800"));
        logger.info("redis.keyExpiredSeconds:{}", expiredSeconds);
    }

    private String jobId; // 任务 ID

    private String jobName; // 任务名称

    private String jobGroup; // 任务分组

    private String cronExpression; // 时间表达式

    private String description; // 任务描述

    private boolean endedNode = Boolean.FALSE;

    private String targetClazz; // Spring 注入的类名

    private Map<String, Object> attachment = new HashMap<>();

    private AtomicEnum<JobState> state = new AtomicEnum<JobState>(JobState.INIT);

//    private WorkFlow workFlow;
//    private String targetMethod; // 方法

    private List<String> preJobs = new ArrayList<>();//当前job的前置依赖项

    private List<String> afterJobs = new ArrayList<>();//后置任务

    private AtomicInteger retryCount = new AtomicInteger(0);

    public Job(){

    }

    public Job(String jobId, String jobName, String jobGroup){
        this.jobId = jobId;
        this.jobName = jobName;
        this.jobGroup = jobGroup;
    }

    public String getJobId() {
        return jobId;
    }

    public void setJobId(String jobId) {
        this.jobId = jobId;
    }

    public String getJobName() {
        return jobName;
    }

    public void setJobName(String jobName) {
        this.jobName = jobName;
    }

    public String getJobGroup() {
        return jobGroup;
    }

    public void setJobGroup(String jobGroup) {
        this.jobGroup = jobGroup;
    }

    public String getCronExpression() {
        return cronExpression;
    }

    public void setCronExpression(String cronExpression) {
        this.cronExpression = cronExpression;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getTargetClazz() {
        if(StringKit.isNotBlank(targetClazz)){
            if(!targetClazz.startsWith("com.tipdm.framework.dmserver.core")){
                return StringKit.replace(targetClazz, "com.tipdm.framework.dmserver", "com.tipdm.framework.dmserver.core");
            }
        }
        return targetClazz;
    }

    public void setTargetClazz(String targetClazz) {
        this.targetClazz = targetClazz;
    }

    public Map<String, Object> getAttachment() {
        return attachment;
    }

    public void setAttachment(Map<String, Object> attachment) {
        this.attachment = attachment;
    }
//    public String getTargetMethod() {
//        return targetMethod;
//    }
//
//    public void setTargetMethod(String targetMethod) {
//        this.targetMethod = targetMethod;
//    }

    public JobState getState() {
        return state.get();
    }

    public List<String> getPreJobs() {
        return preJobs;
    }

    public void setPreJobs(List<String> preJobs) {
        this.preJobs = preJobs;
    }

    public List<String> getAfterJobs() {
        return afterJobs;
    }

    public void setAfterJobs(List<String> afterJobs) {
        this.afterJobs = afterJobs;
    }

//    public WorkFlow workFlow(){
//        return this.workFlow;
//    }
//
//    public void setWorkFlow(WorkFlow workFlow) {
//        this.workFlow = workFlow;
//    }
    public void updateState(JobState state){
        this.state.set(state);
    }
    public void setEndedNode(boolean endedNode) {
        this.endedNode = endedNode;
    }

    public boolean isEndedNode(){
        return endedNode;
    }


    public boolean misfired(){

        if (this.retryCount.get() == 3){
            //复位重试次数
            this.retryCount.set(0);
            return true;
        } else {
            this.retryCount.getAndIncrement();
            return false;
        }
    }

    /**
     * 上级的节点都已经执行完毕，准备就绪
     * @return
     */
    public boolean isReady(){

        if(this.state.get().compareTo(JobState.ABORT) == 0){//job被终止
            return true;
        } else if(preJobs == null || preJobs.size() == 0){//没有依赖节点
            return true;
        } else {
            //上级节点运行状态
            return isSuccessful();
        }
    }

    public boolean isSuccessful(){
//        for(Job job : preJobs){
//            if(!(job.state.get().compareTo(JobState.COMPLETE) == 0)){
//                return false;
//            }
//        }
        return true;
    }

    public void addPreJob(Job job){
        if(null != job) {
            this.preJobs.add(job.getJobId());
        }
    }

    public void addAfterJob(Job job){
        if(null != job) {
            this.afterJobs.add(job.getJobId());
        }
    }

    @SuppressWarnings("all")
    public void addParameter(String key, Object value, WorkFlow workFlow){

        if(null == value){
            return;
        }
        Component component = new Component();
        Node node = (Node)value;

        UserTableService tableService = SpringUtils.getBean("tableService", UserTableService.class);
        ComponentService componentService = SpringUtils.getBean("componentService", ComponentService.class);
        Component serverComponent = componentService.findOne(node.getServerId());
        BeanUtils.copyProperties(node, component, new String[]{"inputs", "outputs"});
        component.setClientId(Long.parseLong(node.getId()));
        if(null != serverComponent) {
            component.setId(node.getServerId());
            component.setEnabled(serverComponent.getEnabled());
            component.setScript(serverComponent.getScript());
            component.setExtra(serverComponent.getExtra());
        }

        for(IO io : node.getInputs()){
            ComponentIO componentIO = new ComponentIO();
            componentIO.setType(ComponentIO.IOType.INPUT);
            componentIO.setModel(io.getIsModel());
            Optional<Link> optional = workFlow.getLinks().stream().filter(x -> x.getInputPortId().equals(io.getId())).findFirst();
            if(optional.isPresent()) {
                Link tmpLink = optional.get();
                Node tmpNode = workFlow.getNodes().stream().filter(x -> x.getId().equals(tmpLink.getSource())).findFirst().get();
                String tempTable = tmpNode.getOutputs().stream().filter(x -> x.getId().equals(tmpLink.getOutputPortId())).findFirst().get().getValue();

                componentIO.setNodeClientId(io.getId());
//                componentIO.setTempTable(CommonUtils.generateTableName(workFlow.getCreator(), tempTable));
                if("model".equals(io.getKey())){
                    componentIO.setTempTable(tempTable);
                } else {
                    if (NumberUtils.isDigits(tempTable)) {
                        UserTable userTable = tableService.findOne(Long.parseLong(tempTable));
                        if(null != userTable) {
                            componentIO.setTempTable(userTable.getTableName());
                        }
                    } else {
                        componentIO.setTempTable(CommonUtils.generateTableName(workFlow.getCreator(), tempTable));
                    }
                }
                componentIO.setKey(io.getKey());
                component.getInputs().add(componentIO);
            }
        }

        for(IO io : node.getOutputs()){
            ComponentIO componentIO = new ComponentIO();
            componentIO.setType(ComponentIO.IOType.OUTPUT);
            componentIO.setCanPreview(io.getCanPreview());
            componentIO.setModel(io.getIsModel());
            componentIO.setNodeClientId(io.getId());
            String tempTable = io.getValue();
            if("model".equals(io.getKey())){
                componentIO.setTempTable(tempTable);
            } else {
                //数据源
                if (NumberUtils.isDigits(tempTable)) {
                    UserTable userTable = tableService.findOne(Long.parseLong(tempTable));
//                    if(null == userTable){
//                        throw new ElementNotFoundException("数据源id[" + tempTable + "]不存在或已被删除，调度文件生成失败");
//                    }
                    if(null != userTable) {
                        componentIO.setTempTable(userTable.getTableName());
                    }
                } else {
                    //临时表
                    tempTable = CommonUtils.generateTableName(workFlow.getCreator(), tempTable);
                    componentIO.setTempTable(tempTable);
                    //分布式组件运行过程中生成的临时表存储在hive中
                    if(component.getParalleled()){
                        RedisUtils.set("@hive:"+tempTable, null, expiredSeconds);
                    } else {
                        RedisUtils.set("@pg:"+tempTable, null, expiredSeconds);
                    }
                }
            }
            componentIO.setKey(io.getKey());
            component.getOutputs().add(componentIO);
        }

        attachment.put(key, component);
    }
}
