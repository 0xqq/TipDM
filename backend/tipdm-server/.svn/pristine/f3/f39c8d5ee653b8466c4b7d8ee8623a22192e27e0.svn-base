package com.tipdm.framework.dmserver.config;

import com.google.common.base.Predicate;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import springfox.documentation.builders.ApiInfoBuilder;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.Contact;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

import java.util.HashSet;
import java.util.Set;

import static com.google.common.base.Predicates.or;
import static springfox.documentation.builders.PathSelectors.regex;
/**
 * Created by zhoulong on 2016/12/10.
 * E-mail:zhoulong8513@gmail.com
 */
@Configuration
@EnableSwagger2
@EnableWebMvc
@PropertySource(value = "classpath:sysconfig/system.properties")
public class RestApiConfig {

    @Value("${authorize_url}")
    private String authorizeUrl;

    @Value("${accesstoken_url}")
    private String accessTokenUrl;

    @Bean
    public Docket api() {
        Set<String> produces = new HashSet<>();
        produces.add("application/json");
//        List<ResponseMessage> responseMessageList = new ArrayList<>();
//        ResponseMessage notFound = new ResponseMessage();
        return new Docket(DocumentationType.SWAGGER_2)
                .apiInfo(apiInfo())
                .produces(produces)
//                .globalResponseMessage(RequestMethod.GET, responseMessageList)
                .select()
                .paths(tipDMAPIPaths())
//                .paths(Predicates.not(PathSelectors.regex("/api/spark/.*")))
                .build();
    }

    private Predicate<String> tipDMAPIPaths() {
        return or(
                regex("/api/.*"),
                regex("/token/.*"),
                regex("/s/.*")
        );
    }

//    private SpringSwaggerConfig springSwaggerConfig;
//
//    /**
//     * Required to autowire SpringSwaggerConfig
//     */
//    @Autowired
//    public void setSpringSwaggerConfig(SpringSwaggerConfig springSwaggerConfig)
//    {
//        this.springSwaggerConfig = springSwaggerConfig;
//    }
//
//    @Bean
//    public static PropertySourcesPlaceholderConfigurer propertySourcesPlaceholderConfigurer() {
//        return new PropertySourcesPlaceholderConfigurer();
//    }
//    /**
//     * Every SwaggerSpringMvcPlugin bean is picked up by the swagger-mvc
//     * framework - allowing for multiple swagger groups i.e. same code base
//     * multiple swagger resource listings.
//     */
//    @Bean
//    public SwaggerSpringMvcPlugin customImplementation()
//    {
//        return new SwaggerSpringMvcPlugin(this.springSwaggerConfig)
//                .apiInfo(apiInfo())
//                .includePatterns("/api/.*")
//                .authorizationTypes(authorizationTypes())
//                .authorizationContext(authorizationContext());
//    }
//
    private ApiInfo apiInfo()
    {
//        ApiInfo apiInfo = new ApiInfo(
//                "TipDM大数据挖掘分析平台|在线API",
//                "在线学习，调用TipDM大数据挖掘分析平台的算法接口。",
//                "TipDM",
//                "service@tipdm.com",
//                "MIT",
//                "/License");
//        return apiInfo;

        return new ApiInfoBuilder()
                .title("TipDM大数据挖掘分析平台|在线API")
                .description("在线学习，测试TipDM大数据挖掘分析平台的算法接口")
                .termsOfServiceUrl("http://www.tipdm.cn")
                .contact(new Contact("TipDM", "http://www.tipdm.cn", "services@tipdm.com"))
//                .license("Apache License Version 3.0")
                .version("3.0")
                .build();
    }


//    @Bean
//    SecurityConfiguration security() {
//        return new SecurityConfiguration(
//                "c1ebe466-1cdc-4bd3-ab69-77c3561b9dee",
//                "d8346ea2-6017-43ed-ad68-19c0f971738b",
//                "realm",
//                "test",
//                "Basic dXNlcm5hbWU6cGFzc3dvcmQ=",
//                ApiKeyVehicle.QUERY_PARAM,
//                "Authorization",
//                ",");
//    }

//    private List<SecurityScheme> scopes(){
//        List<AuthorizationScope> scopes = new ArrayList<AuthorizationScope>();
//        scopes.add(new AuthorizationScope("ECHO_GET_MSG", "see echo"));
//
//
//        List<GrantType> grantTypes = new ArrayList<GrantType>();
//        ImplicitGrant implicitGrant = new ImplicitGrant(new LoginEndpoint(accessTokenUrl), "access_token");
//        grantTypes.add(implicitGrant);
//
//        List<SecurityScheme> response = new ArrayList<SecurityScheme>();
//        OAuth auth = new OAuth(AuthorizationType.OAUTH2.toValue(), scopes, grantTypes);
//        response.add(auth);
//
//        return response;
//    }

//
//    private List<AuthorizationType> authorizationTypes() {
//        ArrayList<AuthorizationType> authorizationTypes = new ArrayList<AuthorizationType>();
//
//        List<AuthorizationScope> authorizationScopeList = new ArrayList();
//        authorizationScopeList.add(new AuthorizationScope("global", "access all"));
//
//        List<GrantType> grantTypes = new ArrayList();
//
////        LoginEndpoint loginEndpoint = new LoginEndpoint("http://petstore.swagger.wordnik.com/api/oauth/dialog");
////        grantTypes.add(new ImplicitGrant(loginEndpoint, "access_token"));
//
//        TokenRequestEndpoint tokenRequestEndpoint = new TokenRequestEndpoint(authorizeUrl, "client_id", "client_secret");
//        TokenEndpoint tokenEndpoint = new TokenEndpoint(accessTokenUrl, "access_token");
//
//        AuthorizationCodeGrant authorizationCodeGrant = new AuthorizationCodeGrant(tokenRequestEndpoint, tokenEndpoint);
//        grantTypes.add(authorizationCodeGrant);
//
//        OAuth oAuth = new OAuthBuilder()
//                .scopes(authorizationScopeList)
//                .grantTypes(grantTypes)
//                .build();
//
//        authorizationTypes.add(oAuth);
//        return authorizationTypes;
//    }
//
//    @Bean
//    public AuthorizationContext authorizationContext() {
//        List<Authorization> authorizations = new ArrayList();
//
//        AuthorizationScope authorizationScope = new AuthorizationScope("global", "accessEverything");
//        AuthorizationScope[] authorizationScopes = new AuthorizationScope[]{authorizationScope};
//        authorizations.add(new Authorization("oauth2", authorizationScopes));
//        AuthorizationContext authorizationContext =
//                new AuthorizationContext.AuthorizationContextBuilder(authorizations).build();
//        return authorizationContext;
//    }
//
//    @Bean
//    public MultipartResolver multipartResolver() {
//        CommonsMultipartResolver multipartResolver = new CommonsMultipartResolver();
//        multipartResolver.setMaxUploadSize(1024 * 1024 * 10);
//        return multipartResolver;
//    }
}
