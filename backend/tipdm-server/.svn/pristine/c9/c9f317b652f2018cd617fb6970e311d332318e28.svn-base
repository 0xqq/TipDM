package com.tipdm.framework.controller.dmserver;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.tipdm.framework.common.Constants;
import com.tipdm.framework.common.controller.Result;
import com.tipdm.framework.common.controller.base.BaseController;
import com.tipdm.framework.common.utils.FileKit;
import com.tipdm.framework.common.utils.PropertiesUtil;
import com.tipdm.framework.common.utils.RedisUtils;
import com.tipdm.framework.common.utils.StringKit;
import com.tipdm.framework.controller.dmserver.entity.ProjectShardInfo;
import com.tipdm.framework.dmserver.core.task.model.Node;
import com.tipdm.framework.model.dmserver.Component;
import com.tipdm.framework.model.dmserver.Document;
import com.tipdm.framework.model.dmserver.Project;
import com.tipdm.framework.model.dmserver.Step;
import com.tipdm.framework.service.dmserver.ComponentService;
import com.tipdm.framework.service.dmserver.ProjectService;
import com.tipdm.framework.service.dmserver.DataTableService;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import org.apache.commons.io.FileUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.PropertySource;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.*;
import springfox.documentation.annotations.ApiIgnore;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Calendar;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Api(tags = "工程信息概览", description = "查看用户分享的工程信息")
@PropertySource(value = "classpath:sysconfig/system.properties")
@RestController
public class SharedController extends BaseController {

    private final Logger logger = LoggerFactory.getLogger(SharedController.class);

    @Autowired
    private ProjectService projectService;

    @Autowired
    private DataTableService tableService;

//    @Autowired
//    private VisualService visualService;

    @Autowired
    private ComponentService componentService;

    @Value("${document.dir}")
    private String docDir;

    @Value("${report.dir}")
    private String reportDir;

    @ApiIgnore
    @RequestMapping(value = "/s/{uuid}", method = RequestMethod.GET)
    public Result getInfo(@PathVariable String uuid, HttpServletRequest request, HttpServletResponse response) throws IOException {
        Result result = new Result();
        ProjectShardInfo shardInfo = StringKit.parseObjectFromBase64String(uuid, ProjectShardInfo.class);
        if (null == shardInfo) {
            throw new FileNotFoundException("挖掘工程不存在");
        }
        Long projectId = shardInfo.getProjectId();
        Project project = projectService.findOne(projectId);
        if (null == project) {
            result.setMessage("工程不存在或已被删除");
            result.setStatus(Result.Status.FAIL);
            return result;
        }
        project.setLastOpenTime(Calendar.getInstance().getTime());
        Document doc = projectService.findDocumentByProjectId(projectId);
        String docDir = RedisUtils.get(com.tipdm.framework.dmserver.utils.Constants.DOCUMENT_DIR, String.class) + "/" + shardInfo.getOwner();
        File parentDir = new File(docDir + "/" + projectService.getRealPathByDocumentId(doc.getParentId()));
        File file = new File(parentDir, project.getName() + ".json");
        project.setJson(FileUtils.readFileToString(file, Constants.CHARACTER));
        result.setData(project);
        result.setMessage("工程获取成功");
        return result;
    }

    @ApiOperation(value = "查看数据", notes = "查看输出节点的数据")
    @RequestMapping(value = "/s/{uuid}/{outputId}/data", method = RequestMethod.GET)
    public Result showData(@PathVariable String uuid, @PathVariable String outputId,
                           @ApiParam(value = "页码", required = true) @RequestParam(value = "pageNumber", defaultValue = "1") int pageNumber,
                           @ApiParam(value = "页大小", required = true) @RequestParam(value = "pageSize", defaultValue = "100") int pageSize,
                           HttpServletRequest request, HttpServletResponse response) throws IOException {
        Result result = new Result();
        Long projectId = check(uuid);
        Page<Map<String, Object>> data = tableService.findDataByOutputId(projectId, outputId, buildPageRequest(pageNumber, pageSize));
        result.setData(data);
        return result;
    }

    @ApiOperation(value = "查看报告", notes = "查看组件的运行结束后生成的算法报告")
    @RequestMapping(value = "/s/{uuid}/{nodeId}/result", method = RequestMethod.GET)
    public Result showResult(@PathVariable String uuid, @PathVariable String nodeId, HttpServletRequest request, HttpServletResponse response) throws IOException {
        Result result = new Result();
        check(uuid);
        String reportDir = RedisUtils.get(com.tipdm.framework.dmserver.utils.Constants.REPORT_DIR, String.class);
        File tmp = new File(reportDir, nodeId + ".html");
        if (!tmp.exists()) {
            result.setData("");
            return result;
        }

        String contextPath = request.getServletContext().getRealPath("/");
        File dir = new File(contextPath, "report");
        if(!dir.exists()){
            dir.mkdirs();
        }
        File destination = new File(dir, nodeId + ".html");
        if(!tmp.getCanonicalPath().equals(destination.getCanonicalPath())) {
            //拷贝到report目录
            FileKit.copyFile(tmp, destination);
        }
        //加时间戳
        Long timestamp = Calendar.getInstance().getTimeInMillis();
        String url = request.getScheme() + "://" + request.getServerName() + ":" + request.getServerPort() + request.getContextPath() + "/report/" + nodeId + ".html?t=" + timestamp;
        result.setData(url);
        return result;
    }

    @ApiOperation(value = "查看日志", notes = "查看组件运行日志")
    @RequestMapping(value = "/s/{uuid}/{nodeId}/log", method = RequestMethod.GET)
    public Result showLog(@PathVariable String uuid, @PathVariable String nodeId, HttpServletRequest request, HttpServletResponse response) throws IOException {
        Result result = new Result();
        check(uuid);
        String log_home = PropertiesUtil.getValue("sysconfig/system.properties", "LOG_HOME");

        String content = FileUtils.readFileToString(new File(log_home + "/" + nodeId + ".log"), Constants.CHARACTER);
        result.setData(content);
        return result;
    }


    @SuppressWarnings("all")
    @RequestMapping(value = "/s/{uuid}/{nodeId}/viewsource", method = RequestMethod.GET)
    @ApiOperation(value = "查看源码", notes = "查看算法的源码，仅支持R，Python")
    public Result viewSource(@PathVariable String uuid,
                             @ApiParam(value = "组件的客户端ID", required = true, name = "nodeId") @PathVariable(name = "nodeId") String nodeId,
                             HttpServletRequest request) throws IOException, ClassNotFoundException {

        Result result = new Result();
        Long projectId = check(uuid);
        ProjectShardInfo shardInfo = StringKit.parseObjectFromBase64String(uuid, ProjectShardInfo.class);

        Project project = projectService.findOne(projectId);
        project.setLastOpenTime(Calendar.getInstance().getTime());
        Document doc = projectService.findDocumentByProjectId(projectId);
        String docDir = RedisUtils.get(com.tipdm.framework.dmserver.utils.Constants.DOCUMENT_DIR, String.class) + "/" + shardInfo.getOwner();
        File parentDir = new File(docDir + "/" + projectService.getRealPathByDocumentId(doc.getParentId()));
        File file = new File(parentDir, project.getName() + ".json");

        String content = FileUtils.readFileToString(file, Constants.CHARACTER);

        if (StringKit.isBlank(content)) {
            result.setMessage("流程未保存， 请保存后再查看");
            result.setStatus(Result.Status.FAIL);
            return result;
        }

        JSONObject jsonObject = JSONObject.parseObject(content);
        List<Node> nodes = JSON.parseArray(jsonObject.getString("nodes"), Node.class);
        Optional<Node> optional = nodes.stream().filter(x -> nodeId.equals(x.getId())).findFirst();

        if (!optional.isPresent()) {
            result.setMessage("无法在流程中获取节点对应的信息，请保存后再试");
            result.setStatus(Result.Status.FAIL);
            return result;
        }

        Node node = optional.get();
        Component component = componentService.findOne(node.getServerId());

        if (component.getScript().size() > 0 && component.getScript().containsKey(Step.MAIN)) {
            result.setData(component.getScript().get(Step.MAIN));
        } else {
            Class clazz = Class.forName(node.getTargetAlgorithm());
            String algorithm = clazz.getSimpleName();
            String scriptPath = clazz.getResource("script/" + algorithm + ".R").getPath();

            content = FileUtils.readFileToString(new File(scriptPath), Constants.CHARACTER);
            result.setData(content);
        }
        return result;
    }

    private Long check(String uuid) throws FileNotFoundException {
        ProjectShardInfo shardInfo = StringKit.parseObjectFromBase64String(uuid, ProjectShardInfo.class);
        if (null == shardInfo) {
            throw new FileNotFoundException("挖掘工程不存在");
        }
        Long projectId = shardInfo.getProjectId();
        Project project = projectService.findOne(projectId);
        if (null == project) {
            throw new FileNotFoundException("挖掘工程不存在");
        }
        return project.getId();
    }

}
