package com.tipdm.framework.service.dmserver.impl;

import com.tipdm.framework.common.utils.StringKit;
import com.tipdm.framework.controller.dmserver.entity.task.UpdateModel;
import com.tipdm.framework.dmserver.core.task.schedule.TaskScheduler;
import com.tipdm.framework.dmserver.core.task.schedule.TaskState;
import com.tipdm.framework.dmserver.exception.ElementNotFoundException;
import com.tipdm.framework.dmserver.exception.IllegalOperationException;
import com.tipdm.framework.model.dmserver.Project;
import com.tipdm.framework.model.dmserver.Task;
import com.tipdm.framework.model.dmserver.TaskType;
import com.tipdm.framework.model.dmserver.UserTable;
import com.tipdm.framework.repository.dmserver.ProjectRepository;
import com.tipdm.framework.repository.dmserver.TaskRepository;
import com.tipdm.framework.repository.dmserver.UserTableRepository;
import com.tipdm.framework.service.AbstractBaseServiceImpl;
import com.tipdm.framework.service.dmserver.TaskService;
import org.quartz.DateBuilder;
import org.quartz.JobKey;
import org.quartz.SchedulerException;
import org.quartz.TriggerKey;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@Transactional
@Service("taskService")
public class TaskServiceImpl extends AbstractBaseServiceImpl<Task, Long> implements TaskService {

    private final static Logger logger = LoggerFactory.getLogger(TaskServiceImpl.class);

    @Autowired
    private UserTableRepository userTableRepository;

    @Autowired
    private ProjectRepository projectRepository;

    @Autowired
    private TaskRepository taskRepository;

    @Autowired
    private TaskScheduler taskScheduler;

    @Override
    public Page<Task> findTaskByCondition(final Map<String, Object> params, Pageable pageable) {

        Specification<Task> specification = new Specification<Task>() {
            @Override
            public Predicate toPredicate(Root<Task> root, CriteriaQuery<?> criteriaQuery, CriteriaBuilder criteriaBuilder) {

                //用于暂时存放查询条件的集合
                List<Predicate> predicatesList = new ArrayList<>();

                Long creatorId = (Long) params.get("creatorId");
                Predicate creatorIdPredicate = criteriaBuilder.equal(root.get("creatorId").as(Long.class), creatorId);
                predicatesList.add(creatorIdPredicate);

                String name = (String) params.get("name");

                if (StringKit.isNotBlank(name)) {
                    Predicate namePredicate = criteriaBuilder.like(root.get("name").as(String.class), name + "%");
                    predicatesList.add(namePredicate);
                }

                Predicate[] predicates = new Predicate[predicatesList.size()];
                criteriaQuery.where(criteriaBuilder.and(predicatesList.toArray(predicates)));
                //按创建时间降序排序
//                criteriaQuery.orderBy(criteriaBuilder.desc(root.get("createTime")));

                return criteriaQuery.getRestriction();
            }
        };
        return taskRepository.findAll(specification, pageable);
    }

    public List<Map<String, Object>> filterTaskByName(Long creatorId, String condition, Integer limit) {
        if(StringKit.isNotBlank(condition)) {
            if(condition.trim() == ""){
                return new ArrayList<>(0);
            }
            return taskRepository.filterTaskByName(creatorId, condition + "%", limit);
        } else {
            return new ArrayList<>(0);
        }
    }

    public void update(Long id, UpdateModel model) {
        Task task = taskRepository.findOne(id);
        if (null == task) {
            throw new ElementNotFoundException("任务不存在，任务ID：" + id);
        }

        if (task.getStatus() == TaskState.RUNNING) {
            throw new IllegalOperationException("任务正在运行中，不能执行修改操作，请停止后再试");
        }

        task.setDependentTaskId(model.getDependentTaskId());
        task.setDependentMode(model.getDependentMode());
        task.setDescription(model.getDescription());
        task.setExpression(model.getExpression());
        task.setTaskType(model.getTaskType());
    }

    @Override
    public void updateStatus(Long id, TaskState state) {
        Task task = taskRepository.findOne(id);
        if (null == task) {
            throw new ElementNotFoundException("任务不存在，任务ID：" + id);
        }
        task.setStatus(state);
    }

    @Override
    public Task get(Long id) {
        Task task = findOne(id);
        if (task == null) {
            throw new ElementNotFoundException("任务不存在，ID：" + id);
        }
        if (null != task.getInstanceId()) {
            if (task.getTaskType() == TaskType.DATASOURCE) {
                UserTable userTable = userTableRepository.findOne(task.getInstanceId());
                if (null != userTable) {
                    task.setInstanceName(userTable.getShowName());
                }
            } else {
                Project project = projectRepository.findOne(task.getInstanceId());
                if (null != project) {
                    task.setInstanceName(project.getName());
                }
            }
        }
        if(task.getDependentTaskId() != null){
            Task dependentTask = findOne(task.getDependentTaskId());
            if(null != dependentTask){
                task.setDependentTaskName(dependentTask.getName());
            }
        }
        return task;
    }

    @Override
    public void start(String accessToken, Long id) throws SchedulerException {
        Task task = taskRepository.findOne(id);
        if (task == null) {
            throw new ElementNotFoundException("任务不存在，ID：" + id);
        }
        taskScheduler.schedule(accessToken, task);
        //更新任务状态
        task.setStatus(TaskState.RUNNING);
    }

    @Override
    public void now(String accessToken, Long id) throws SchedulerException {
        Task task = taskRepository.findOne(id);
        if (task == null) {
            throw new ElementNotFoundException("任务不存在，ID：" + id);
        }
        String jobName = TriggerKey.createUniqueName(task.getTaskGroup());
        taskScheduler.schedule(accessToken, jobName, task, DateBuilder.nextGivenSecondDate(null, 1));
    }

    @Override
    public void stop(Long id) throws SchedulerException {
        Task task = taskRepository.findOne(id);
        if (task == null) {
            throw new ElementNotFoundException("任务不存在，ID：" + id);
        }
        JobKey jobKey = JobKey.jobKey(task.getName(), task.getTaskGroup());
        taskScheduler.deleteJob(jobKey);
        task.setStatus(TaskState.END);
    }

    @Override
    public List<Task> findByName(String name) {
        return taskRepository.findByName(name);
    }
}
