package com.tipdm.framework.dmserver.config;

import com.tipdm.framework.common.utils.PropertiesUtil;
import com.tipdm.framework.common.utils.RedisUtils;
import com.tipdm.framework.dmserver.utils.Constants;
import com.tipdm.license.LicenseVerifyFilter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.servlet.*;
import javax.servlet.annotation.WebListener;
import java.io.File;
import java.util.EnumSet;
import java.util.Map;

/**
 * Created by zhoulong on 2017/2/24.
 * E-mail:zhoulong8513@gmail.com
 * 初始化系统常量
 */
@WebListener
public class InitSystemConstListener implements ServletContextListener {

    private final static Logger logger = LoggerFactory.getLogger(InitSystemConstListener.class);

    private String doc;

    private String model;

    private String report;

    private String jar;

    private String temp;

    @Override
    public void contextInitialized(ServletContextEvent servletContextEvent) {

        ServletContext servletContext = servletContextEvent.getServletContext();
        //动态注册验证Licence的filter
        FilterRegistration.Dynamic licenseVerifyFilter = servletContext.addFilter("licenseVerifyFilter", new LicenseVerifyFilter());
        licenseVerifyFilter.addMappingForUrlPatterns(EnumSet.of(DispatcherType.REQUEST), false, "*");

//        String contextPath = servletContext.getRealPath("/");
        Map<String, String> map = PropertiesUtil.getProperties("sysconfig/system.properties");

        String rootDir = map.get("ROOT_DIR");

        doc = map.get("document.dir");
        model = map.get("model.dir");
        report = map.get("report.dir");
        jar = map.get("jar.dir");
//        temp = map.get("file.upload.dir");
//        logger.info("app contextPath: " + contextPath);
        //检测流程存放目录是否存在
        existsDir(rootDir, doc);
        //检测模型存放目录是否存在
        existsDir(rootDir, model);

        existsDir(rootDir, report);

        existsDir(rootDir, jar);

//        existsDir(rootDir, temp);

        //检测公共目录
        existsDir(rootDir, Constants.SMB_PUBLIC_DIR);
        //检测数据源存储目录
        existsDir(rootDir, Constants.SMB_PRIVATE_DIR);
    }

    /**
     * 检测目录是否存在
     */
    private void existsDir(String rootDir, String dir) {

        File file = new File(rootDir, dir);
        if(!file.exists()){
            file.mkdirs();
            RedisUtils.set(dir, file.getAbsolutePath());
        }
    }

    @Override
    public void contextDestroyed(ServletContextEvent servletContextEvent) {

    }
}
