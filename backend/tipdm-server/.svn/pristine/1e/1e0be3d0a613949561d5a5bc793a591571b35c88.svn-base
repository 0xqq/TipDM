package com.tipdm.framework.controller.dmserver;
import com.tipdm.framework.common.Constants;
import com.tipdm.framework.common.LinkedProperties;
import com.tipdm.framework.common.controller.Result;
import com.tipdm.framework.common.token.TokenManager;
import com.tipdm.framework.common.utils.PropertiesUtil;
import com.tipdm.framework.controller.dmserver.entity.Setting;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import javax.servlet.http.HttpServletRequest;
import java.io.*;
import java.util.*;

@RestController
@RequestMapping("/api/setting")
@Api(value = "/api/setting", position = 1, tags = "系统设置")
public class SettingController {

    @Autowired
    private TokenManager tokenManager;

    @Value("${setting.dir}")
    private String settingDir;

    @Value("${setting.name}")
    private String settingName;

    @RequiresPermissions("setting:list")
    @RequestMapping(value = "/list", method = RequestMethod.GET)
    @ApiOperation(value = "获取可修改配置文件")
    public Result getList(@ApiParam(value = "用户访问令牌", required = true) @RequestParam("accessToken") String accessToken,HttpServletRequest request) {
        Result result = new Result();
        //此处不需要操作TokenModel，所以不用从redis加载
//        TokenModel tokenModel = tokenManager.getPermissions(accessToken);
//        if(tokenModel!=null) {
//            String dir = request.getSession().getServletContext().getRealPath("/" + this.settingDir + "/" + this.settingName);
            String dir = request.getServletContext().getRealPath("/" + this.settingDir + "/" + this.settingName);
            File file = new File(dir);
            BufferedReader reader = null;
            try {
                InputStream inputStream = new FileInputStream(file);
                reader = new BufferedReader(new InputStreamReader(inputStream,Constants.CHARACTER));
                List<Setting> list = new ArrayList<Setting>();
                Properties pro = new LinkedProperties();
                pro.load(reader);
                Iterator<String> it = pro.stringPropertyNames().iterator();
                while (it.hasNext()){
                    String key = it.next();//取key
                    String value = pro.getProperty(key);//取key里面的value,相当于等号后面的值

                    Setting set = new Setting();
                    set.setKey(key);
//                    set.setValue(value);
                    set.setEdit(true);
//                    set.setClassPath(value);
                    list.add(set);
                }
                reader.close();//关闭读写
                result.setData(list);
                result.setStatus(Result.Status.SUCCESS);
            } catch (IOException ex) {
                ex.printStackTrace();
            }
//        }
        return result;
    }

    @RequiresPermissions("setting:content")
    @RequestMapping(value = "/content", method = RequestMethod.GET)
    @ApiOperation(value = "获取指定文件内容")
    public Result getContent(@ApiParam(value = "用户访问令牌", required = true) @RequestParam("accessToken") String accessToken,
                             @ApiParam(value = "配置文件名", required = true) @RequestParam("configName")String configName,
                            HttpServletRequest request) {
        Result result = new Result();

//        String dir = request.getServletContext().getRealPath("/" + this.settingDir + "/" + this.settingName);
        String realPath = PropertiesUtil.getValue("sysconfig/setting.properties", configName);

        if(null == realPath){
            result.setData(null);
            return result;
        }
//        TokenModel tokenModel = tokenManager.getPermissions(accessToken);
//        if(tokenModel!=null) {
            try {
                List<Setting> list = new ArrayList<Setting>();
                Properties pro = PropertiesUtil.loadProperties(realPath);//只对properties文件有效

                for(Map.Entry<Object, Object> entry : pro.entrySet()) {
                    String key = (String)entry.getKey();//取key
                    String value = (String)entry.getValue();//取key里面的value,相当于等号后面的值

                    Setting set = new Setting();
                    set.setKey(key);
                    set.setValue(value);
                    set.setEdit(true);//是否可修改
                    set.setConfigName(configName);//文件路径
                    list.add(set);
                }
                result.setData(list);
                result.setStatus(Result.Status.SUCCESS);

            } catch (Exception ex) {
                ex.printStackTrace();
            }
//        }
        return result;
    }

    @RequiresPermissions("setting:updateValue")
    @RequestMapping(value = "/content", method = RequestMethod.PUT)
    @ApiOperation(value = "修改指定文件指定内容")
    public Result updateValue(@ApiParam(value = "用户访问令牌", required = true) @RequestParam("accessToken") String accessToken,
                             @ApiParam(value = "配置文件名", required = true) @RequestParam("configName")String configName,
                              @ApiParam(value = "key", required = true) @RequestParam("key") String key,
                             @ApiParam(value = "可修改的value", required = true) @RequestParam("value") String value,HttpServletRequest request) {
        Result result = new Result();

//        String dir = request.getServletContext().getRealPath("/" + this.settingDir + "/" + this.settingName);
        String realPath = PropertiesUtil.getValue("sysconfig/setting.properties", configName);

        PropertiesUtil.setValue(realPath, key, value);
//        TokenModel tokenModel = tokenManager.getPermissions(accessToken);
//        if(tokenModel!=null) {
//            BufferedReader br = null;
//            BufferedWriter bw = null;
//            StringBuffer sb = new StringBuffer();
//            boolean trueFalse = false;
//            try {
//                InputStream in =  SettingController.class.getClassLoader().getResourceAsStream(classPath);
//                String dir= request.getSession().getServletContext().getRealPath("/WEB-INF/classes/" + classPath);
//                File file = new File(dir);
//                br = new BufferedReader(new InputStreamReader(in,Constants.CHARACTER));//先读取
//                String line = null;
//                while ((line = br.readLine()) != null) {
//                    if (line.startsWith(key)) {//找到需要修改的key
//                        sb.append(key + "=" + value + "\r\n");
//                        trueFalse = true;
//                    } else {//不需要修改的按原样写回去
//                           sb.append(line+"\r\n");
//                    }
//                }
//                if(trueFalse){//如果输入的key存在就写入
//                    bw = new BufferedWriter(new FileWriter(file));//写入
//                    bw.write(sb.toString());
//                    br.close();//关闭读
//                    bw.close();//关闭写
//                    result.setData(value);
//                    result.setStatus(Result.Status.SUCCESS);
//                } else {//如果输入的key不存在就不写入
//                    br.close();//关闭读
//                    result.setData(value);
//                    result.setMessage("修改失败,key不存在！");
//                    result.setStatus(Result.Status.FAIL);
//                }
                //这种方式修改会,不读取注释影响整个文件原有排版,所以采用上面方式
//               Properties prop = new Properties();
//                InputStream is = new FileInputStream(classPath);
//                prop.load(is);
//                is.close();
//                OutputStream fos = new FileOutputStream(classPath);
//                prop.setProperty("db.password", "root");
//                prop.store(fos, "");
//                fos.close();
//            } catch (IOException ex) {
//                result.setData(value);
//                result.setMessage("修改失败,文件不存在！");
//                result.setStatus(Result.Status.FAIL);
//            }
//        }
        return result;
    }
}
