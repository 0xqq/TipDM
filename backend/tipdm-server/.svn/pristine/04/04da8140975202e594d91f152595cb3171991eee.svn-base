package com.tipdm.framework.dmserver.shiro.filter;

import com.alibaba.fastjson.JSON;
import com.tipdm.framework.common.Constants;
import com.tipdm.framework.dmserver.shiro.token.BearerAuthenticationToken;
import org.apache.shiro.web.filter.AccessControlFilter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Map;

/**
 * Created by TipDM on 2016/12/8.
 * E-mail:devp@tipdm.com
 */
public class BearerTokenAuthenticatingFilter extends AccessControlFilter {

    private final static Logger logger = LoggerFactory.getLogger(BearerTokenAuthenticatingFilter.class);
    @Override
    protected boolean isAccessAllowed(ServletRequest servletRequest, ServletResponse servletResponse, Object o) throws Exception {
        return false;
    }

    @Override
    protected boolean onAccessDenied(ServletRequest servletRequest, ServletResponse servletResponse) throws Exception {

        //从请求链接中获取token
        String token = servletRequest.getParameter("accessToken");
        BearerAuthenticationToken bearerAuthenticationToken = new BearerAuthenticationToken(token);
        try {
            cors((HttpServletResponse)servletResponse);
            getSubject(servletRequest, servletResponse).login(bearerAuthenticationToken);
            return true;
        }catch(Exception ex){
            Map<String, Object> result = new HashMap<>();
            result.put("message", "操作超时，请重新登录！");
            result.put("status", 401);
            onAccessFail(servletRequest, servletResponse, JSON.toJSONString(result));
            return false;
        }
    }

    //登录失败时默认返回401状态码
    private void onAccessFail(ServletRequest servletRequest, ServletResponse servletResponse, String errorMessage) throws IOException {
        HttpServletResponse response = (HttpServletResponse) servletResponse;
        response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
        cors(response);
        PrintWriter out = response.getWriter();
        out.write(errorMessage);
        out.flush();
        out.close();
    }


    private void cors(HttpServletResponse response){
        response.setCharacterEncoding(Constants.CHARACTER);
        response.setHeader("Access-Control-Allow-Origin", "*");
        response.setHeader("Access-Control-Allow-Methods", "POST, GET, PUT, PATCH, OPTIONS, DELETE");
        response.setHeader("Access-Control-Max-Age", "3600");
        response.setHeader("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
        response.setContentType("application/json;charset=utf-8");
    }
}
