package com.tipdm.framework.dmserver;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.serializer.ValueFilter;
import com.tipdm.framework.common.Constants;
import com.tipdm.framework.dmserver.core.task.model.Link;
import com.tipdm.framework.dmserver.core.task.model.Node;
import com.tipdm.framework.model.dmserver.Component;
import com.tipdm.framework.model.dmserver.ComponentIO;
import com.tipdm.framework.service.dmserver.ComponentService;
import org.apache.commons.io.FileUtils;
import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.annotation.Rollback;
import org.springframework.test.context.ContextConfiguration;
import org.springside.modules.test.spring.SpringTransactionalTestCase;

import javax.transaction.Transactional;
import java.io.File;
import java.io.IOException;
import java.util.List;

/**
 * Created by zhoulong on 2016/12/15.
 * E-mail:zhoulong8513@gmail.com
 */
@ContextConfiguration(locations = { "classpath*:/applicationContext*.xml" })
@Transactional
public class ComponentTest extends SpringTransactionalTestCase {

    @Autowired
    private ComponentService componentService;

    @Test()
    @Rollback()
    public void testAddComponent(){

        Component component = new Component();
        component.setParentId(0L);
        component.setCreatorName("admin");
        component.setCreatorId(100L);

        ComponentIO input = new ComponentIO();
        input.setType(ComponentIO.IOType.INPUT);

        component.getInputs().add(input);
//        input.setComponent(component);

        componentService.save(component);
    }


    public static void main(String[] args) throws IOException {
        File file = new File("d:/temp.json");
//        String fileName = StringKit.replace(UUID.randomUUID().toString(), "-", "") + ".pmml";
//        System.out.println(fileName);

        String content = FileUtils.readFileToString(file, Constants.CHARACTER);
        JSONObject jsonObject = JSON.parseObject(content);

        List<Node> nodes = JSON.parseArray(jsonObject.getString("nodes"), Node.class);
        List<Link> links = JSON.parseArray(jsonObject.getString("links"), Link.class);
//
//        Long seq = 10000326L;
//        for(Node node : nodes){
//
//            String nodeId = node.getId();
//            final String seqId = seq.toString();
//
//            node.getInputs().stream().forEach(new Consumer<IO>() {
//                @Override
//                public void accept(IO io) {
//                    boolean compare = io.getId().equals(io.getValue());
//
//                    String[] tmp = StringKit.split(io.getId(), "_");
//                    tmp[0] = seqId;
//                    io.setId(StringKit.join(tmp, "_"));
//                    //如果没有修改前id的值等于value
//                    if(compare){
//                        io.setValue(io.getId());
//                    }
//                }
//            });
//
//            node.getOutputs().stream().forEach(new Consumer<IO>() {
//                @Override
//                public void accept(IO io) {
//                    boolean compare = io.getId().equals(io.getValue());
//
//                    String[] tmp = StringKit.split(io.getId(), "_");
//                    tmp[0] = seqId;
//                    io.setId(StringKit.join(tmp, "_"));
//                    //如果没有修改前id的值等于value
//                    if(compare){
//                        io.setValue(io.getId());
//                    }
//                }
//            });
//
//            links.stream().filter(x -> nodeId.equals(x.getTarget())).forEach(x -> x.setTarget(seqId));
//            links.stream().filter(x -> nodeId.equals(x.getSource())).forEach(x -> x.setSource(seqId));
//
//            node.setId(seqId);
//            seq++;
//        }
//
//        links.stream().forEach(new Consumer<Link>() {
//            @Override
//            public void accept(Link link) {
//                String[] tmp = StringKit.split(link.getInputPortId(), "_");
//                tmp[0] = link.getTarget();
//                link.setInputPortId(StringKit.join(tmp, "_"));
//
//                tmp = StringKit.split(link.getOutputPortId(), "_");
//                tmp[0] = link.getSource();
//                link.setOutputPortId(StringKit.join(tmp, "_"));
//                link.setId(link.getOutputPortId()+"_"+link.getInputPortId());
//            }
//        });
//
        ValueFilter filter = new ValueFilter() {
            @Override
            public Object process(Object source, String name, Object value) {
                if(name.contains("Items")){
                    return JSON.parseArray((String)value);
                }
                return value;
            }
        };

        JSONObject json = new JSONObject();
        json.put("nodes", nodes);
        json.put("links", links);
        String jsonString = JSON.toJSONString(json, filter);

        System.out.println(jsonString);

//        FileUtils.writeStringToFile(new File("d:/temp2.json"), jsonString, Constants.CHARACTER);
    }
}
