package com.tipdm.framework.controller.dmserver;

import com.tipdm.framework.common.controller.base.BaseController;
import com.tipdm.license.GenerateMachineCodeException;
import com.tipdm.license.License;
import com.tipdm.license.LicenseVerifier;
import de.schlichtherle.license.LicenseContentException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.File;
import java.io.IOException;

/**
 * Created by zhoulong on 2016/12/27.
 * E-mail:zhoulong8513@gmail.com
 */
@ApiIgnore
@RestController
public class LicenseController extends BaseController {

    private final static Logger logger = LoggerFactory.getLogger(LicenseController.class);

    /**
     * 安装License
     * @param license
     * @return
     */
    @RequestMapping(value = "/license/install", method = RequestMethod.POST)
    public String install(@RequestParam(name = "license") MultipartFile license, HttpServletRequest request, HttpServletResponse response){

        if(null != license) {
            try {
                File dir = new File(request.getServletContext().getRealPath("/WEB-INF/license"));
                if(!dir.exists()){
                    dir.mkdir();
                }
                File file = new File(dir, license.getOriginalFilename());
                license.transferTo(file);

                LicenseVerifier licenseVerifier = new LicenseVerifier();
                licenseVerifier.install(file);
                response.sendRedirect(request.getContextPath() + "/");
            } catch (IOException e) {
                e.printStackTrace();
            } catch (LicenseContentException e) {
                String machineCode = null;
                try {
                    machineCode = License.generateMachineCode();
                } catch (GenerateMachineCodeException e1) {
                    e1.printStackTrace();
                }
                try {
                    request.setAttribute("message", "License验证不通过，无效或过期的License");
                    request.setAttribute("machineCode", machineCode);
                    request.getRequestDispatcher("/unAuth.jsp").forward(request, response);
                }  catch (ServletException e1) {
                    e1.printStackTrace();
                } catch (IOException e1) {
                    e1.printStackTrace();
                }
            }
        }
        return null;
    }
}
