package com.tipdm.framework.dmserver;

import com.tipdm.framework.common.Constants;
import com.tipdm.framework.common.utils.CronExpressionKit;
import com.tipdm.framework.dmserver.core.task.schedule.WorkFlow;
import com.tipdm.framework.dmserver.core.task.schedule.WorkFlowScheduler;
import org.apache.commons.io.FileUtils;
import org.joda.time.DateTime;
import org.junit.Test;
import org.quartz.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.quartz.SchedulerFactoryBean;
import org.springframework.test.annotation.Rollback;
import org.springframework.test.context.ContextConfiguration;
import org.springside.modules.test.spring.SpringTransactionalTestCase;

import javax.transaction.Transactional;
import java.io.File;
import java.util.UUID;

/**
 * Created by zhoulong on 2016/12/15.
 * E-mail:zhoulong8513@gmail.com
 */
@ContextConfiguration(locations = { "classpath*:/applicationContext*.xml" })
@Transactional
public class QuartzTest extends SpringTransactionalTestCase {

    @Autowired
    private WorkFlowScheduler workFlowScheduler;

    @Autowired
    private SchedulerFactoryBean schedulerFactory;

    @Test()
    @Rollback(value = false)
    public void testCreateJob(){

        String json = null;
        try {
            json = FileUtils.readFileToString(new File("C:/Users/yarn/Desktop/newProject.json"), Constants.CHARACTER);
            WorkFlow flow = new WorkFlow("admin", json);

//            logger.info(flow.getState() == WorkFlowState.INIT);
            workFlowScheduler.execute(flow);

            Thread.sleep(1000 * 60 * 1);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    @Test
    public void testSchedule(){

//        SchedulerFactoryBean schedulerFactoryBean = SpringUtils.getBean("schedulerFactory", SchedulerFactoryBean.class);
        Scheduler scheduler = schedulerFactory.getScheduler();

        DateTime dateTime = DateTime.now().plusSeconds(15);
        String cronExpress = CronExpressionKit.getCron(dateTime.toDate());
        String jobName = UUID.randomUUID().toString();
        TriggerKey triggerKey = TriggerKey.triggerKey(jobName, "group");
        // 表达式调度构建器
        CronScheduleBuilder scheduleBuilder = CronScheduleBuilder.cronSchedule(cronExpress);
        // 按新的表达式构建一个新的trigger
        CronTrigger trigger = TriggerBuilder.newTrigger().withIdentity(triggerKey).withSchedule(scheduleBuilder).build();

        JobKey jobKey = new JobKey(jobName, "group");

        JobDetail jobDetail = JobBuilder.newJob(TestJob.class).withIdentity(jobKey).build();

        try {
            scheduler.start();
            scheduler.scheduleJob(jobDetail, trigger);
            try {
                Thread.sleep(1000 * 30);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        } catch (SchedulerException e) {
            e.printStackTrace();
        }
    }
}
