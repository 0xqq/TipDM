package com.tipdm.framework.controller.dmserver;

import com.tipdm.framework.common.controller.Result;
import com.tipdm.framework.common.controller.base.BaseController;
import com.tipdm.framework.common.token.TokenManager;
import com.tipdm.framework.common.token.model.TokenModel;
import com.tipdm.framework.controller.dmserver.entity.task.AddModel;
import com.tipdm.framework.controller.dmserver.entity.task.UpdateModel;
import com.tipdm.framework.model.dmserver.Task;
import com.tipdm.framework.service.dmserver.ProjectService;
import com.tipdm.framework.service.dmserver.TaskService;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/task")
@Api(value = "/api/task", position = 1, tags = "任务管理")
public class TaskController extends BaseController {

    @Autowired
    private TokenManager tokenManager;

    @Autowired
    private TaskService taskService;

    @Autowired
    private ProjectService projectService;

    @Value("${document.dir}")
    private String docDir;

    @RequiresPermissions("task:list")
    @RequestMapping(value = "/list", method = RequestMethod.GET)
    @ApiOperation(value = "任务列表")
    public Result getList(@ApiParam(value = "用户访问令牌", required = true) @RequestParam("accessToken") String accessToken,
                          @ApiParam(value = "任务名称", required = false) @RequestParam(value = "name", required = false) String name,
                          @ApiParam(value = "页码", required = true) @RequestParam(value = "pageNumber", defaultValue = "1") int pageNumber,
                          @ApiParam(value = "页大小", required = true) @RequestParam(value = "pageSize", defaultValue = "10") int pageSize) {
        Result result = new Result();
        TokenModel tokenModel = tokenManager.getPermissions(accessToken);
        Map<String, Object> searchParams = new HashMap<>();
        searchParams.put("creatorId", tokenModel.getUserId());
        searchParams.put("name", name);
        Page<Task> tables = taskService.findTaskByCondition(searchParams, buildPageRequest(pageNumber, pageSize));

        result.setData(tables);
        result.setStatus(Result.Status.SUCCESS);
        return result;
    }

    @RequiresPermissions("task:delete")
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @ApiOperation(value = "删除任务列表项")
    public Result deleteTask(@ApiParam(value = "用户访问令牌", required = true) @RequestParam("accessToken") String accessToken,
                             @ApiParam(value = "任务ID", required = true) @PathVariable(name = "id") Long id, HttpServletRequest request) throws Exception {
        Result result = new Result();
        taskService.delete(id);
        return result;
    }

    @RequiresPermissions("task:get")
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @ApiOperation(value = "获取任务数据")
    public Result getViewTask(@ApiParam(required = true) @RequestParam(required = true) String accessToken,
                              @ApiParam(required = true) @PathVariable(name = "id") Long id) throws Exception {

        Result result = new Result();
        Task task = taskService.get(id);
        result.setMessage("任务数据加载成功");
        result.setData(task);
        return result;
    }

    @RequiresPermissions("task:update")
    @RequestMapping(value = "/{id}", method = RequestMethod.PATCH)
    @ApiOperation(value = "更新定时任务")
    public Result updateTask(@ApiParam(required = true) @RequestParam(required = true) String accessToken,
                             @ApiParam(required = true) @PathVariable(name = "id") Long id,
                             @ApiParam(required = true) @RequestBody UpdateModel task,
                             HttpServletRequest request) throws Exception {
        Result result = new Result();
        taskService.update(id, task);
        return result;
    }

    @RequiresPermissions("task:add")
    @RequestMapping(value = "/", method = RequestMethod.POST)
    @ApiOperation(value = "添加定时任务")
    public Result addTask(@ApiParam(required = true) @RequestParam(required = true) String accessToken,
                          @ApiParam(required = true) @RequestBody AddModel addModel) throws Exception {

        Result result = new Result();
        TokenModel tokenModel = tokenManager.getPermissions(accessToken);
        Task task = new Task();
        BeanUtils.copyProperties(addModel, task);
        task.setCreatorId(tokenModel.getUserId());
        task.setCreatorName(tokenModel.getUsername());
        taskService.save(task);
        result.setData(task.getId());
        return result;
    }

    @RequiresPermissions("task:start")
    @RequestMapping(value = "/{id}/start", method = RequestMethod.GET)
    @ApiOperation(value = "部署定时任务")
    public Result start(@ApiParam(value = "用户访问令牌", required = true) @RequestParam("accessToken") String accessToken,
                        @ApiParam(value = "任务ID", required = true) @PathVariable(name = "id") Long id) throws Exception {
        Result result = new Result();
        taskService.start(accessToken, id);
        return result;
    }

    @RequiresPermissions("task:now")
    @RequestMapping(value = "/{id}/now", method = RequestMethod.GET)
    @ApiOperation(value = "立即执行一次任务")
    public Result now(@ApiParam(value = "用户访问令牌", required = true) @RequestParam("accessToken") String accessToken,
                        @ApiParam(value = "任务ID", required = true) @PathVariable(name = "id") Long id) throws Exception {
        Result result = new Result();
        taskService.now(accessToken, id);
        return result;
    }

    @RequiresPermissions("task:stop")
    @RequestMapping(value = "/{id}/stop", method = RequestMethod.GET)
    @ApiOperation(value = "停止定时任务")
    public Result stop(@ApiParam(value = "用户访问令牌", required = true) @RequestParam("accessToken") String accessToken,
                       @ApiParam(value = "任务ID", required = true) @PathVariable(name = "id") Long id) throws Exception {
        Result result = new Result();
        taskService.stop(id);
        result.setMessage("操作成功，任务停止定时调度");
        return result;
    }

    @RequiresPermissions("task:filter")
    @RequestMapping(value = "/filter", method = RequestMethod.GET)
    @ApiOperation(value = "过滤定时任务", notes = "根据用户输入的数据过滤定时任务")
    public Result likeTask(@ApiParam(value = "用户访问令牌", required = true) @RequestParam("accessToken") String accessToken,
                           @ApiParam(value = "输入过滤条件", required = true) @RequestParam String condition,
                           @ApiParam(value = "返回的数据条数", required = true, allowableValues = "range[1,100]") @RequestParam(value = "limit", defaultValue = "20") int limit) {
        Result result = new Result();
        if (limit > 100) {
            limit = 100;
        }
        TokenModel tokenModel = tokenManager.getPermissions(accessToken);
        List<Map<String, Object>> data = taskService.filterTaskByName(tokenModel.getUserId(), condition, limit);
        result.setData(data);
        result.setStatus(Result.Status.SUCCESS);
        return result;
    }

}
