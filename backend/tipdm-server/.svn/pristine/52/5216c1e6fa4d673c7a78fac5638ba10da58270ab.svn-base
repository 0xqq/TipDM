package com.tipdm.framework.service.dmserver.impl;

import com.tipdm.framework.common.utils.RedisUtils;
import com.tipdm.framework.common.utils.StringKit;
import com.tipdm.framework.controller.dmserver.entity.UploadInfo;
import com.tipdm.framework.controller.dmserver.entity.uda.Input;
import com.tipdm.framework.controller.dmserver.entity.uda.Output;
import com.tipdm.framework.controller.dmserver.entity.uda.Param;
import com.tipdm.framework.controller.dmserver.entity.uda.UDATestBean;
import com.tipdm.framework.dmserver.core.algo.unparallel.interpreter.PythonInterpreter;
import com.tipdm.framework.dmserver.utils.CommonUtils;
import com.tipdm.framework.dmserver.utils.GlobalSeqGenerator;
import com.tipdm.framework.model.dmserver.Component;
import com.tipdm.framework.model.dmserver.ComponentExtra;
import com.tipdm.framework.repository.dmserver.ComponentRepository;
import com.tipdm.framework.repository.dmserver.UserTableRepository;
import com.tipdm.framework.service.AbstractBaseServiceImpl;
import com.tipdm.framework.service.dmserver.UDAService;
import org.apache.commons.collections.CollectionUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.*;
import java.util.stream.Collectors;

/**
 * Created by zhoulong on 2017/2/22.
 * E-mail:zhoulong8513@gmail.com
 */
@Service("udaService")
public class UDAServiceImpl extends AbstractBaseServiceImpl<Component, Long> implements UDAService {

    private final static Logger logger = LoggerFactory.getLogger(UDAServiceImpl.class);

    @Autowired
    private ComponentRepository componentRepository;

    @Autowired
    private UserTableRepository userTableRepository;


    @Transactional
    @Override
    public Boolean testScript(UDATestBean uda, String creatorName) {
        Map<String, String> outputs = new HashMap<>();
        try {
            if (CollectionUtils.isNotEmpty(uda.getOutputs())) {
                for (Output io : uda.getOutputs()) {
                    String tableName = CommonUtils.generateTableName(creatorName, GlobalSeqGenerator.getNextId().toString());
                    io.setValue(tableName);
                    outputs.put(io.getKey(), tableName);
                }
            }
            Map<String, String> inputs = new HashMap<>();
            for (Input io : uda.getInputs()) {
                inputs.put(io.getKey(), CommonUtils.generateTableName(creatorName, io.getTempTable()));
            }
            Map<String, String> params = uda.getParams().stream().collect(Collectors.toMap(Param::getName, Param::getValue));
            PythonInterpreter.makeTrainFile(uda.getScript(), inputs, outputs, params, "temp.html", "temp.model");
            return true;

        } catch (Exception ex) {
            logger.error("execute Rscript faild, error message: {}", ex.getMessage());
            return false;
        } finally {
            //测试完删除临时表
            for (Map.Entry<String, String> entry : outputs.entrySet()) {
                try {
                    userTableRepository.dropTable(entry.getValue());
                } catch (Exception ex) {

                }
            }
        }
    }


    @Override
    public List<Component> findList(Long parentId, Long creatorId) {
        List<Component> list = componentRepository.findByParentId(parentId, creatorId, Boolean.FALSE);
        Map<String, Object> map = RedisUtils.getMap(com.tipdm.framework.dmserver.utils.Constants.FILE_UPLOAD_ID);
        list.parallelStream().forEach(x -> {
            if (StringKit.isBlank(x.getExtra().getValue()) && x.getExtra().getType() == ComponentExtra.ExtraType.FILE) {
                Optional optional = map.values().stream().filter(o -> x.getId().equals(((UploadInfo) o).getId()) && ((UploadInfo) o).getCategory() == UploadInfo.Category.UDC).findFirst();
                if (optional.isPresent()) {
                    x.setUploadId(((UploadInfo) optional.get()).getUploadId());
                }
            }
        });
        return list;
    }

    @Override
    public void update(Long id, Component component) {
        Component modifyObj = componentRepository.findOne(id);
        BeanUtils.copyProperties(component, modifyObj, new String[]{"id"});
        modifyObj.setUpdateTime(Calendar.getInstance().getTime());
        componentRepository.merge(modifyObj);
    }

    @Override
    public void deleteUDA(Long id, Long creatorId) throws IllegalAccessException {
        Component component = componentRepository.findOne(id);
        if (component == null) {
            throw new NullPointerException("组件不存在或已被删除");
        }
        if (creatorId.equals(component.getCreatorId()) && !component.getInBuilt()) {
            componentRepository.delete(component);
        } else {
            throw new IllegalAccessException("对不起，您不能执行此操作");
        }

    }
}
