package com.tipdm.framework.dmserver.redis;

import com.tipdm.framework.common.utils.SpringUtils;
import com.tipdm.framework.common.utils.StringKit;
import com.tipdm.framework.service.dmserver.UserTableService;
import org.quartz.Scheduler;
import org.quartz.SchedulerException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.quartz.SchedulerFactoryBean;
import org.springframework.stereotype.Component;

import java.io.Serializable;
import java.util.Map;

/**
 * Created by zhoulong on 2017/8/15.
 * E-mail:zhoulong8513@gmail.com
 */
@Component
public class DefaultMessageDelegate implements MessageDelegate{

    private final static Logger logger = LoggerFactory.getLogger(DefaultMessageDelegate.class);

    private UserTableService tableService = SpringUtils.getBean("tableService", UserTableService.class);

    @Autowired
    private SchedulerFactoryBean schedulerFactory;

    @Override
    public void handleMessage(String message) {
        logger.info("handle String message");
    }

    @Override
    public void handleMessage(Map message) {
        logger.info("handle Map message");
    }

    @Override
    public void handleMessage(byte[] message) {
        logger.info("handle byte[] message");
    }

    @Override
    public void handleMessage(Serializable message) {
        logger.info("handle Serializable message");
    }

    @Override
    public void handleMessage(Serializable key, String channel) {
        logger.info("handle event:{}, key:{}", channel, key);

        String trueKey = (String) key;
        //存储在postgresql中的表
        if(trueKey.startsWith("@pg:")){
            //从postgresql库删除表
            tableService.dropExpiredTable(StringKit.substringAfter(trueKey, "@pg:"));
        } else if(trueKey.startsWith("@hive:")){
            //从hive库删除表
            tableService.dropExpiredTable(StringKit.substringAfter(trueKey, "@hive:"));
        } else if(trueKey.startsWith("@flow:")){
            Scheduler scheduler = schedulerFactory.getScheduler();
            String workFlowId = StringKit.substringAfter(trueKey, "@flow:");
            try {
                logger.info("remove variable from schedulerContext, variable name: {}", workFlowId);
                scheduler.getListenerManager().removeJobListener(workFlowId);
                scheduler.getContext().remove(workFlowId);
            } catch (SchedulerException e) {
                logger.error("remove variable from schedulerContext fail, variable name: {}", workFlowId);
            }
        }
        //测试代码
//        System.out.println(MessageFormatter.format("channel: {}, key: {}", channel, key).getMessage());
//        try {
//            Thread.sleep(1000 * 60);
//        } catch (InterruptedException e) {
//            e.printStackTrace();
//        }
    }
}
