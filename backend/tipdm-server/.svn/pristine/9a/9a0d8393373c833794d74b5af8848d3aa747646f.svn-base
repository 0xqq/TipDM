package com.tipdm.license;

import com.tipdm.license.util.LicenseModel;
import de.schlichtherle.license.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.io.IOException;
import java.util.Properties;
import java.util.prefs.Preferences;


/**
 * License验证
 */
public class LicenseVerifier {
	
	private Logger logger = LoggerFactory.getLogger(LicenseVerifier.class);
	
	private static Properties properties;
	//common param
	private static String PUBLICALIAS = "";
	private static String STOREPWD = "";
	private static String SUBJECT = "";
	private static String PUBSTORE_PATH = "/publicCerts.store";

	static{
		properties = new Properties();
		ClassLoader loader = Thread.currentThread().getContextClassLoader();
		try {
			properties.load(loader.getResourceAsStream("licensePublic.properties"));
		} catch (IOException e) {
			e.printStackTrace();
		}
//		PUBSTORE_PATH = LicenseVerifier.class.getClassLoader().getResource(PUBSTORE_PATH).getFile();
	}

	public LicenseVerifier(){
		PUBLICALIAS = properties.getProperty("PUBLICALIAS");
		STOREPWD = properties.getProperty("STOREPWD");
		SUBJECT = properties.getProperty("SUBJECT");
	}
	
	public boolean install(File license) throws LicenseContentException {
		LicenseManager licenseManager = LicenseManagerHolder
				.getLicenseManager(initLicenseParams());
		// 安装
		try {
			licenseManager.install(license);
		} catch (Exception e) {
			throw new LicenseContentException(e.getMessage());
		}
		return verify();
	}
	
	public boolean verify() throws LicenseContentException{

		LicenseManager licenseManager = LicenseManagerHolder
				.getLicenseManager(initLicenseParams());
		// 验证
		try {
			LicenseContent content = licenseManager.verify();
			LicenseModel checkModel = (LicenseModel)content.getExtra();
			return checkModel.validate();
		} catch (Exception e) {
			e.printStackTrace();
			throw new LicenseContentException(e.getMessage());
		}
	}

	//
	private static LicenseParam initLicenseParams() {
		Preferences preference = Preferences
				.userNodeForPackage(LicenseVerifier.class);
		CipherParam cipherParam = new DefaultCipherParam(STOREPWD);

		KeyStoreParam privateStoreParam = new DefaultKeyStoreParam(
				LicenseVerifier.class, PUBSTORE_PATH, PUBLICALIAS, STOREPWD, null);
		LicenseParam licenseParams = new DefaultLicenseParam(SUBJECT,
				preference, privateStoreParam, cipherParam);
		return licenseParams;
	}

}