package com.tipdm.framework.controller.dmserver;

import com.tipdm.framework.common.controller.Result;
import com.tipdm.framework.common.controller.base.BaseController;
import com.tipdm.framework.common.token.TokenManager;
import com.tipdm.framework.common.token.model.TokenModel;
import com.tipdm.framework.common.utils.FileKit;
import com.tipdm.framework.common.utils.StringKit;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.PropertySource;
import org.springframework.mail.javamail.JavaMailSenderImpl;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.mail.MessagingException;
import javax.mail.internet.MimeMessage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

@RestController
@RequestMapping("/api/feedback")
@PropertySource(value = "classpath:sysconfig/email.properties")
@Api(value = "/api/feedback", position = 1, tags = "使用帮助", description = "平台使用帮助、问题反馈")
public class FeedbackController extends BaseController{

    private final Logger logger = LoggerFactory.getLogger(FeedbackController.class);

    @Value("${issue.account}")
    private String issueAccount;

    @Autowired
    private JavaMailSenderImpl mailSender;

    @Autowired
    private TokenManager tokenManager;

    @RequiresPermissions("fb:issue")
    @RequestMapping(value = "/issue", method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @ApiOperation(value = "报告问题", notes = "提交bug，使用问题反馈", position = 1)
    public Result commitIssue(@ApiParam(value = "用户访问令牌", required = true) @RequestHeader("accessToken") String accessToken,
                              @ApiParam(value = "类型", required = true) @RequestParam(name = "type") String type,
                              @ApiParam(value = "内容", required = true) @RequestParam(name = "content") String content,
                              @ApiParam(value = "联系方式", required = true) @RequestParam(name = "contact") String contact,
                              @ApiParam(value = "截图", required = false, allowMultiple = true) @RequestBody MultipartFile[] screenshot
                              ) {

        Result result = new Result();
        TokenModel tokenModel = tokenManager.getPermissions(accessToken);
        List<File> tmpFile = new ArrayList<>();
        try {
            MimeMessage mail = mailSender.createMimeMessage();
            MimeMessageHelper smm = new MimeMessageHelper(mail, true);
            // 设定参数
            smm.setFrom(mailSender.getUsername());
            smm.setTo(issueAccount);
            smm.setSubject("用户反馈");

            String text = "" +
                    "<html>" +
                        "<body> " +
                            "<h4>用户名：" + tokenModel.getUsername() + "</h4> " +
                            "<p>反馈类型：" + type + "</p> " +
                            "<p>反馈内容：" + content + "</p> " +
                            "<p>联系方式：" + contact + "</p> " +
                        "</body> " +
                    "</html>";
            smm.setText(text, true);

            if(screenshot != null && screenshot.length <= 3) {
                for(MultipartFile multipartFile : screenshot) {
                    File att = new File(StringKit.getBase64FromUUID());
                    multipartFile.transferTo(att);
                    att.createNewFile();
                    smm.addAttachment(multipartFile.getOriginalFilename(), att);
                    tmpFile.add(att);
                }
            } else if(screenshot != null && screenshot.length > 3){
                throw new MessagingException("最多可提交3张截图");
            }
            mailSender.send(mail);
        } catch (MessagingException ex) {
            logger.error("邮件发送失败，cause：{}", ex.getMessage());
            result.setStatus(Result.Status.FAIL);
            result.setMessage("操作失败");
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            for(File tmp : tmpFile){
                try {
                    FileKit.forceDelete(tmp);
                } catch (IOException e) {

                }
            }
            tmpFile = null;
        }
        return result;
    }

}
